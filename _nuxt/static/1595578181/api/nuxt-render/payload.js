__NUXT_JSONP__("/api/nuxt-render", {data:[{},{path:"\u002Fzh\u002Fapi\u002Fnuxt-render",section:"api",page:{attrs:{title:"API: nuxt.render(req, res)",description:"你可以把 Nuxt.js 当做是中间件来集成到已有的 Node.js 应用中。"},body:"\u003Ch1 id=\"nuxt-render-req-res-\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#nuxt-render-req-res-\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003Enuxt.render(req, res)\u003C\u002Fh1\u003E\u003Cul\u003E\n\u003Cli\u003E类型： \u003Ccode\u003EFunction\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E参数：\u003Col\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fapi\u002Fhttp.html#http_class_http_incomingmessage\"\u003ERequest\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fapi\u002Fhttp.html#http_class_http_serverresponse\"\u003EResponse\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E返回： \u003Ccode\u003EPromise\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E你可以通过 \u003Ccode\u003Enuxt.render\u003C\u002Fcode\u003E 函数，把 Nuxt.js 变成你 Node.js 服务端的中间件。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E例如，结合 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fexpressjs\u002Fexpress\"\u003EExpress.js\u003C\u002Fa\u003E 使用：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { Nuxt, Builder } = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;nuxt&#x27;\u003C\u002Fspan\u003E)\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E app = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;express&#x27;\u003C\u002Fspan\u003E)()\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E isProd = (process.env.NODE_ENV === \u003Cspan class=\"hljs-string\"\u003E&#x27;production&#x27;\u003C\u002Fspan\u003E)\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E port = process.env.PORT || \u003Cspan class=\"hljs-number\"\u003E3000\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 用指定的配置对象实例化 Nuxt.js\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E config = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;.\u002Fnuxt.config.js&#x27;\u003C\u002Fspan\u003E)\nconfig.dev = !isProd\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E nuxt = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Nuxt(config)\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 用 Nuxt.js 渲染每个路由\u003C\u002Fspan\u003E\napp.use(nuxt.render)\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 在开发模式下启用编译构建和热加载\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (config.dev) {\n  \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Builder(nuxt).build()\n    .then(listen)\n} \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n  listen()\n}\n\n\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Elisten\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 服务端监听\u003C\u002Fspan\u003E\n  app.listen(port, \u003Cspan class=\"hljs-string\"\u003E&#x27;0.0.0.0&#x27;\u003C\u002Fspan\u003E)\n  \u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E&#x27;Server listening on `localhost:&#x27;\u003C\u002Fspan\u003E + port + \u003Cspan class=\"hljs-string\"\u003E&#x27;`.&#x27;\u003C\u002Fspan\u003E)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003E建议把 \u003Cstrong\u003Enuxt.render\u003C\u002Fstrong\u003E 放到中间件列表的最后面，因为它不会再调用 next() 方法，而是直接处理你 web 应用的页面渲染。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n"},contributors:[{author:"melan0802"},{author:"manniL"},{author:"mubaidr"}]}],fetch:[],mutations:[]});