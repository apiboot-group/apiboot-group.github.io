__NUXT_JSONP__("/blog/moving-from-nuxtjs-dotenv-to-runtime-config", {data:[{path:"\u002Fzh\u002Fblog\u002Fmoving-from-nuxtjs-dotenv-to-runtime-config",post:{path:"zh\u002Fblog\u002Fmoving-from-nuxtjs-dotenv-to-runtime-config.md",slug:"moving-from-nuxtjs-dotenv-to-runtime-config",readtime:{text:"14 min read",minutes:13.39,time:803400.0000000001,words:2678},title:"Moving from @nuxtjs\u002Fdotenv to runtime config",description:"In our frontend applications, we often use APIs and third-party integrations which require us to use configuration data which is usually provided by environment variables. These variables should not be exposed to the frontend as the browser environment is accessible by all visitors.",imgUrl:"blog\u002Fmoving-from-nuxtjs-dotenv-to-runtime-config\u002Fmain.png",date:"2020-06-15T00:00:00.000Z",authors:[{name:"Debbie O'Brien",avatarUrl:"https:\u002F\u002Fpbs.twimg.com\u002Fprofile_images\u002F1252900852156772352\u002FJLIVJ-TC_400x400.jpg",link:"https:\u002F\u002Ftwitter.com\u002Fdebs_obrien"}],tags:["Nuxt","env"],body:"\u003Cp\u003EIt&#39;s time to migrate from @nuxtjs\u002Fdotenv module to use our new runtime config which has been released as of Nuxt v2.13.\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#what-are-environment-variables\"\u003EWhat are environment variables\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#misconceptions\"\u003EMisconceptions\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#why-we-need-webpack\"\u003EWhy we need webpack\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#how-environment-variables-work\"\u003EHow environment variables work\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#introducing-the-nuxtjs-runtime-config\"\u003EIntroducing the Nuxt.js runtime config\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#migrating-to-the-nuxtjs-runtime-config-from-nuxtjsdotenv\"\u003EMigrating to the Nuxt.js runtime config from @nuxtjs\u002Fdotenv\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#migrating-to-the-nuxtjs-runtime-config-from-the-env-property\"\u003EMigrating to the Nuxt.js runtime config from the env property\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#the-env-property-v-runtime-config\"\u003EThe env property v runtime config\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#using-your-config-values\"\u003EUsing your config values\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#migrating-your-config-values-in-your-script-tags\"\u003EMigrating your config values in your script tags\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#migrating-your-config-values-in-your-templates\"\u003EMigrating your config values in your templates\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#expandinterpolation-support\"\u003EExpand\u002FInterpolation Support\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#best-practices\"\u003EBest Practices:\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#what-to-do-next\"\u003EWhat to do next\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"what-are-environment-variables\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#what-are-environment-variables\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EWhat are environment variables\u003C\u002Fh2\u003E\u003Cp\u003EIn our frontend applications, we often use APIs and third-party integrations which require us to use configuration data which is usually provided by environment variables. These variables should not be exposed to the frontend as the browser environment is accessible by all visitors. Instead, we can store sensitive information, like keys and secrets, in password-protected CI tools or deployment pipelines. However, when we are developing applications locally we might not have access to deployment pipelines and therefore need somewhere to store these environment variables. \u003C\u002Fp\u003E\n\u003Ch2 id=\"misconceptions\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#misconceptions\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EMisconceptions\u003C\u002Fh2\u003E\u003Cp\u003EIt is very easy to think that your secret keys are safe by placing them somewhere other than your source code such as a \u003Ccode\u003E.env\u003C\u002Fcode\u003E file, which makes it very easy to expose your secret keys to client-side bundles. Adding your \u003Ccode\u003E.env\u003C\u002Fcode\u003E file to \u003Ccode\u003E.gitignore\u003C\u002Fcode\u003E means this file is not pushed to your version control and therefore not available for people to see which is important if your repo is public. However, the .env file is not encrypted, and therefore placing secrets in environment variables doesn&#39;t really provide us with an increase in security and really it just keeps sensitive data out of plain sight. A \u003Ccode\u003E.env\u003C\u002Fcode\u003E option can easily mislead developers to expose secret keys to client-side bundles so always make sure this file is added to your .gitignore.\u003C\u002Fp\u003E\n\u003Ch2 id=\"why-we-need-webpack\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#why-we-need-webpack\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EWhy we need webpack\u003C\u002Fh2\u003E\u003Cp\u003EIsomorphic applications, otherwise known as universal applications, need to share code between both the server and the client. Babel is used to compile our modern ES6 JavaScript code down to ES5 JavaScript so that it can work across all platforms. Node.js which is an asynchronous event-driven JavaScript runtime that can be used in computers and servers outside of a browser environment, uses the module system. \u003C\u002Fp\u003E\n\u003Cp\u003EUsing modules in Node.js is done using require, eg require(&#39;lodash&#39;). However, browser support for modules is still incomplete and therefore we need bundling tools such as webpack to transpile these modules into code that the browsers can read. Webpack basically makes client-side development more &quot;Node-like&quot; with the same module system semantics. This means that a require statement or an ES6 import statement will resolve the same way. And as our applications are not only JavaScript but also HTML, CSS and images we can require these using webpack&#39;s loaders.\u003C\u002Fp\u003E\n\u003Ch2 id=\"how-environment-variables-work\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#how-environment-variables-work\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EHow environment variables work\u003C\u002Fh2\u003E\u003Cp\u003EAt runtime, Node.js automatically loads environment variables into \u003Ccode\u003Eprocess.env\u003C\u002Fcode\u003E so that they are available to use in your application. The reference to the environment variable is replaced with the correct value. For example, if you had an \u003Ccode\u003EAPI_SECRET\u003C\u002Fcode\u003E key with the value of \u003Ccode\u003E&#39;my-secret&#39;\u003C\u002Fcode\u003E then in your application where you had used \u003Ccode\u003Eprocess.env.API_SECRET\u003C\u002Fcode\u003E this would be replaced with the value of my-secret. \u003C\u002Fp\u003E\n\u003Cp\u003EValues are read during build time and persisted in the webpack bundle. Therefore if we change our \u003Ccode\u003EAPI_SECRET\u003C\u002Fcode\u003E we will need to rebuild our application so that it can read the new value.\u003C\u002Fp\u003E\n\u003Ch2 id=\"introducing-the-nuxt-js-runtime-config\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#introducing-the-nuxt-js-runtime-config\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EIntroducing the Nuxt.js runtime config\u003C\u002Fh2\u003E\u003Cp\u003EWith Nuxt.js 2.13+ we have runtime config and built-in dotenv support providing better security and faster development! Two new options are added to your \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E file which will allow passing runtime configuration which is then accessible using \u003Ccode\u003E$config\u003C\u002Fcode\u003E from the context. Despite the \u003Ccode\u003Eenv\u003C\u002Fcode\u003E option, runtime config is added to the Nuxt payload so there is no need to rebuild in order to update the runtime configuration when working in development or with Server-side rendering or single-page applications. Although for static sites you will still need to regenerate your site to see these changes.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EpublicRuntimeConfig\u003C\u002Fspan\u003E: {},\n  \u003Cspan class=\"hljs-attr\"\u003EprivateRuntimeConfig\u003C\u002Fspan\u003E: {}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"the-new-runtime-config-values-are-\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#the-new-runtime-config-values-are-\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EThe new runtime config values are:\u003C\u002Fh3\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EpublicRuntimeConfig\u003C\u002Fcode\u003E should hold all env variables that are public as these will be exposed on the frontend. This could include a reference to your public URL for example.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EprivateRuntimeConfig\u003C\u002Fcode\u003E should hold all env variables that are private and that should not be exposed on the frontend. This could include a reference to your API secret tokens for example.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E⚠️ privateRuntimeConfig always overrides publicRuntimeConfig on server-side. \u003Ccode\u003E$config\u003C\u002Fcode\u003E in server mode is { ...public, ...private } but for client mode only { ...public }\u003C\u002Fp\u003E\n\u003Ch2 id=\"migrating-to-the-nuxt-js-runtime-config-from-nuxtjs-dotenv\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#migrating-to-the-nuxt-js-runtime-config-from-nuxtjs-dotenv\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EMigrating to the Nuxt.js runtime config from @nuxtjs\u002Fdotenv\u003C\u002Fh2\u003E\u003Cp\u003EIf you have the \u003Ccode\u003E@nuxtjs\u002Fdotenv\u003C\u002Fcode\u003E module installed then you can remove this module by uninstalling it and removing it from the modules section of your nuxt.config file. You can then migrate to the Nuxt.js runtime config by adding the new properties to your nuxt.config.js file. And then you can add your variables from your \u003Ccode\u003E.env\u003C\u002Fcode\u003E files into your public and private runtime config properties so that Nuxt.js has access to these variables at runtime.\u003C\u002Fp\u003E\n\u003Cp\u003EIf your \u003Ccode\u003E.env\u003C\u002Fcode\u003E file looks something like this:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003E.env\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs \"\u003EBASE_URL=https:\u002F\u002Fnuxtjs.org\nAPI_SECRET=1234\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen migrating it to the new runtime config would look something like:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EpublicRuntimeConfig\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EbaseURL\u003C\u002Fspan\u003E: process.env.BASE_URL\n  },\n  \u003Cspan class=\"hljs-attr\"\u003EprivateRuntimeConfig\u003C\u002Fspan\u003E: {\n        \u003Cspan class=\"hljs-attr\"\u003EapiSecret\u003C\u002Fspan\u003E: process.env.API_SECRET\n  },\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThis can be simplified even further by using a default value instead of having to maintain the value in both the runtime config and the \u003Ccode\u003E.env\u003C\u002Fcode\u003E file when using non-sensitive values. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EpublicRuntimeConfig\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EbaseURL\u003C\u002Fspan\u003E: process.env.BASE_URL || \u003Cspan class=\"hljs-string\"\u003E&#x27;https:\u002F\u002Fnuxtjs.org&#x27;\u003C\u002Fspan\u003E\n  },\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAlso this can be a better replacement for \u003Ccode\u003E.env.example\u003C\u002Fcode\u003E and the default values can point to staging keys\u002Fconfigs.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EpublicRuntimeConfig\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EbaseURL\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;https:\u002F\u002Fdev.nuxtjs.org&#x27;\u003C\u002Fspan\u003E || \u003Cspan class=\"hljs-string\"\u003E&#x27;https:\u002F\u002Fnuxtjs.org&#x27;\u003C\u002Fspan\u003E\n  },\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"migrating-to-the-nuxt-js-runtime-config-from-the-env-property\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#migrating-to-the-nuxt-js-runtime-config-from-the-env-property\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EMigrating to the Nuxt.js runtime config from the env property\u003C\u002Fh2\u003E\u003Cp\u003EIf you have your env variables stored in your nuxt.config then you can migrate these to use the new runtime configs by adding them to your nuxt.config file.\u003C\u002Fp\u003E\n\u003Cp\u003EIf your env variables in your nuxt.config look like this:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Eenv\u003C\u002Fspan\u003E:  {\n        \u003Cspan class=\"hljs-attr\"\u003EBASE_URL\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;https:\u002F\u002Fnuxtjs.org&#x27;\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"hljs-attr\"\u003EAPI_SECRET\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;1234&#x27;\u003C\u002Fspan\u003E\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen migrating it to the new runtime config would look something like:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EpublicRuntimeConfig\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EbaseURL\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;https:\u002F\u002Fnuxtjs.org&#x27;\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003EprivateRuntimeConfig\u003C\u002Fspan\u003E: {\n        \u003Cspan class=\"hljs-attr\"\u003EapiSecret\u003C\u002Fspan\u003E: process.env.API_SECRET\n  },\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E⚠️ Remember secret keys should not be placed in your nuxt.config file so if you do have them in your env variables then you should remove them. You can create a .env file if needed or else your secret keys can be stored just in your hosting environment.\u003C\u002Fp\u003E\n\u003Ch2 id=\"the-env-property-v-runtime-config\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#the-env-property-v-runtime-config\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EThe env property v runtime config\u003C\u002Fh2\u003E\u003Cp\u003EYou can still use the env property and it is still useful for env variables that are required at build time rather than runtime such as NODE_ENV=staging or VERSION=1.2.3. However for runtime env variables the runtime config is preferred as using the env property can be as dangerous as  using the dotenv module when used incorrectly.\u003C\u002Fp\u003E\n\u003Ch2 id=\"using-your-config-values\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#using-your-config-values\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EUsing your config values\u003C\u002Fh2\u003E\u003Cp\u003EOnce you have stored your values in the public or private runtime config in your \u003Ccode\u003Enuxt.config\u003C\u002Fcode\u003E file you can then access these values anywhere by using the context in your pages, store, components and plugins by using \u003Ccode\u003Ethis.$config\u003C\u002Fcode\u003E or \u003Ccode\u003Econtext.$config instead.\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E&lt;script&gt;\n        asyncData ({ \u003Cspan class=\"hljs-attr\"\u003E$config\u003C\u002Fspan\u003E: { baseURL } }) { \n            \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E posts = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E fetch(\u003Cspan class=\"hljs-string\"\u003E`\u003Cspan class=\"hljs-subst\"\u003E${baseURL}\u003C\u002Fspan\u003E\u002Fposts`\u003C\u002Fspan\u003E)\n      .then(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Eres\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E res.json())\n        }\n&lt;\u002Fscript&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAnd inside your templates you can access it directly using \u003Ccode\u003E{{ $config.* }}\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EOur Url is: {{ $config.baseURL}}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"migrating-your-config-values-in-your-script-tags\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#migrating-your-config-values-in-your-script-tags\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EMigrating your config values in your script tags\u003C\u002Fh2\u003E\u003Cp\u003EIf you are already using the env variable in your script tags such as in async data\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData ({ env }) {\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E then you can just replace env for $config when passing into the context. Here we also pass in the key from the config that we want to access. In this case baseURL.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData ({ \u003Cspan class=\"hljs-attr\"\u003E$config\u003C\u002Fspan\u003E: { baseURL } }) {\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen instead of using env.apiUrl \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E posts = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E fetch(\u003Cspan class=\"hljs-string\"\u003E`\u003Cspan class=\"hljs-subst\"\u003E${env.baseUrl}\u003C\u002Fspan\u003E\u002Fposts`\u003C\u002Fspan\u003E)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eyou can use baseUrl direct in your code as we have already passed this in into the config option above and therefore we don&#39;t have to reference $config in our fetch.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E posts = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E fetch(\u003Cspan class=\"hljs-string\"\u003E`\u003Cspan class=\"hljs-subst\"\u003E${baseURL}\u003C\u002Fspan\u003E\u002Fposts`\u003C\u002Fspan\u003E)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"migrating-your-config-values-in-your-templates\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#migrating-your-config-values-in-your-templates\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EMigrating your config values in your templates\u003C\u002Fh2\u003E\u003Cp\u003EIf you have code that is using the env variables you can migrate to using the $config option. For example if in your code you had\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{process.env.baseURL}}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EYou can change this by using $config instead\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{$config.baseURL}}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"expand-interpolation-support\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#expand-interpolation-support\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EExpand\u002FInterpolation Support\u003C\u002Fh2\u003E\u003Cp\u003EExpand for run time config happens only if there is already a key. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003E.env\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs \"\u003EAPI_SECRET=1234\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EprivateRuntimeConfig\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EAPI_SECRET\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E\n  },\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EInterpolation allows nesting env vars. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003E.env\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs \"\u003EBASE_URL=\u002Fapi\nPUBLIC_URL=https:\u002F\u002Fnuxtjs.org\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003EprivateRuntimeConfig\u003C\u002Fspan\u003E: {\n        \u003Cspan class=\"hljs-attr\"\u003EbaseURL\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;${PUBLIC_URL}${BASE_URL}&#x27;\u003C\u002Fspan\u003E,  },\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eℹ️ It is also possible to use a function for publicRuntimeConfig and privateRuntimeConfig but not recommended.\u003C\u002Fp\u003E\n\u003Ch2 id=\"best-practices-\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#best-practices-\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EBest Practices:\u003C\u002Fh2\u003E\u003Cp\u003E🚫 Don’t commit sensitive values or secret keys to git\u003C\u002Fp\u003E\n\u003Cp\u003E🚫 Don&#39;t store secret keys or sensitive values in your nuxt.config or \u003Ccode\u003E.env\u003C\u002Fcode\u003E unless is gitignored\u003C\u002Fp\u003E\n\u003Cp\u003E✅ Use default values for runtimeConfig such as process.env.baseURL || &#39;\u003Ca href=\"https:\u002F\u002Fnuxt.js.org&#39;\"\u003Ehttps:\u002F\u002Fnuxt.js.org&#39;\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E✅ Store secret keys correctly using your hosting platform such as on Heroku or Netlify etc\u003C\u002Fp\u003E\n\u003Cp\u003E✅ Follow JS naming convention (secretKey rather than SECRET_KEY) for runtimeConfig\u003C\u002Fp\u003E\n\u003Cp\u003E✅ Prefer using runtimeConfig rather than \u003Ccode\u003Eenv\u003C\u002Fcode\u003E option\u003C\u002Fp\u003E\n\u003Ch2 id=\"what-to-do-next\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#what-to-do-next\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EWhat to do next\u003C\u002Fh2\u003E\u003Cul\u003E\n\u003Cli\u003ETo learn more about going full static checkout \u003Ca href=\"\u002Fblog\u002Fgoing-full-static\"\u003Ethis article\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#subscribe-to-newsletter\"\u003ESubscribe to the newsletter\u003C\u002Fa\u003E to not miss the upcoming articles and resources.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",links:{previous:{title:"Going Full Static",slug:"going-full-static"},next:{title:"Going dark with Nuxt.js color mode",slug:"going-dark-with-nuxtjs-color-mode"}}}}],fetch:[],mutations:[]});