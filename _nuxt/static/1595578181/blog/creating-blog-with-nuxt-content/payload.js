__NUXT_JSONP__("/blog/creating-blog-with-nuxt-content", (function(a){return {data:[{path:"\u002Fzh\u002Fblog\u002Fcreating-blog-with-nuxt-content",post:{path:"zh\u002Fblog\u002Fcreating-blog-with-nuxt-content.md",slug:"creating-blog-with-nuxt-content",readtime:{text:"36 min read",minutes:35.13,time:2107800,words:7026},title:"Create a Blog with Nuxt Content",description:"The Content module is a git files based headless CMS that provides powerful features when it comes to write blogs, documentation sites or just adding content to any regular website. In this post we will go through most of the benefits of this module and discover how we can create a blog with it.",imgUrl:"blog\u002Fcreating-blog-with-nuxt-content\u002Fmain.png",date:"2020-07-02T00:00:00.000Z",authors:[{name:"Debbie O'Brien",avatarUrl:"https:\u002F\u002Fpbs.twimg.com\u002Fprofile_images\u002F1252900852156772352\u002FJLIVJ-TC_400x400.jpg",link:"https:\u002F\u002Ftwitter.com\u002Fdebs_obrien"}],tags:["Nuxt","Content","Markdown"],body:"\u003Cp\u003EThe \u003Ca href=\"https:\u002F\u002Fcontent.nuxtjs.org\"\u003Econtent module\u003C\u002Fa\u003E is a git files based headless CMS that provides powerful features when it comes to write blogs, documentation sites or just adding content to any regular website. In this post we will go through most of the benefits of this module and discover how we can create a blog with it.\u003C\u002Fp\u003E\n\u003Cvideo poster=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Fdemo-blog-content_shk6kw.jpg\" loop=\"loop\" plays-inline=\"true\" controls=\"controls\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Fdemo-blog-content_shk6kw.webm\" type=\"video\u002Fwebm\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1592314331\u002Fdemo-blog-content_shk6kw.mp4\" type=\"video\u002Fmp4\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Fdemo-blog-content_shk6kw.ogv\" type=\"video\u002Fogg\"\u003E\n\u003C\u002Fvideo\u003E\n\n\u003Cp align=\"center\"\u003E\n  \u003Ca href=\"https:\u002F\u002Fblog-with-nuxt-content.netlify.app\u002F\" target=\"_blank\" rel=\"noopener nofollow\"\u003EView demo\u003C\u002Fa\u003E \u002F \n  \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt-company\u002Fdemo-blog-nuxt-content\" target=\"_blank\" rel=\"noopener nofollow\"\u003ESource code\u003C\u002Fa\u003E\n\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#getting-started\"\u003EGetting started\u003C\u002Fa\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#installation\"\u003EInstallation\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#lets-create-our-markdown-page\"\u003ELet&#39;s create our markdown page\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#displaying-your-content\"\u003EDisplaying your content\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#default-injected-variables\"\u003EDefault Injected variables\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#custom-injected-variables\"\u003ECustom Injected variables\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#styling-our-markdown-content\"\u003EStyling our markdown content\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#adding-an-icon-to-our-headings-anchor\"\u003EAdding an icon to our headings anchor\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#add-a-table-of-contents\"\u003EAdd a table of contents\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#use-html-into-your-markdown-files\"\u003EUse HTML into your markdown files\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#adding-a-vue-component\"\u003EAdding a Vue component\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#adding-an-author-component-with-props\"\u003EAdding an Author component with props\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#adding-a-code-block-to-your-post\"\u003EAdding a code block to your post\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#creating-a-previous-and-next-component\"\u003ECreating a previous and next component\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#working-with-the-api\"\u003EWorking with the API\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#list-all-the-blog-posts\"\u003EList all the blog posts\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#using-the-where-query-to-create-an-author-page\"\u003EUsing the where query to create an Author page\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#add-a-search-field\"\u003EAdd a search field\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#live-editing-our-content\"\u003ELive editing our content\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#generating-our-content\"\u003EGenerating our content\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#conclusion\"\u003EConclusion\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"getting-started\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#getting-started\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EGetting started\u003C\u002Fh2\u003E\u003Ch3 id=\"installation\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#installation\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EInstallation\u003C\u002Fh3\u003E\u003Cp\u003ETo get started with content module we will first need to install the module using npm or yarn. \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install @nuxt\u002Fcontent\n\u002F\u002F or\nyarn add @nuxt\u002Fcontent\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen we can add it to our modules property inside our nuxt.config file. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Emodules\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;@nuxt\u002Fcontent&#x27;\u003C\u002Fspan\u003E\n  ]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EIf you have created a new project with \u003Ccode\u003Ecreate nuxt-app\u003C\u002Fcode\u003E you can choose to add the content module and therefore it will be installed for you. \u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch3 id=\"let-39-s-create-our-markdown-page\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#let-39-s-create-our-markdown-page\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ELet&#39;s create our markdown page\u003C\u002Fh3\u003E\u003Cp\u003EThe content module works by reading the files in our \u003Ccode\u003Econtent\u002F\u003C\u002Fcode\u003E directory. \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Emkdir content\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EIf you have created your project with \u003Ccode\u003Ecreate nuxt-app\u003C\u002Fcode\u003E, the \u003Ccode\u003Econtent\u002F\u003C\u002Fcode\u003E directory will be already created. \u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003ELet&#39;s create an \u003Ccode\u003Earticles\u002F\u003C\u002Fcode\u003E directory where we can add the articles for our blog.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Emkdir content\u002Farticles\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThe content module can parse markdown, csv, yaml, json, json5 or xml. Let&#39;s create our first article with a markdown file:\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Etouch content\u002Farticles\u002Fmy-first-blog-post.md\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can now add a title and text for our blog post: \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs markdown\"\u003E\u003Cspan class=\"hljs-section\"\u003E# My first blog post\u003C\u002Fspan\u003E\n\nWelcome to my first blog post using content module\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EIn markdown we create a \u003Ccode\u003E&lt;h1&gt;\u003C\u002Fcode\u003E title by using \u003Ccode\u003E#\u003C\u002Fcode\u003E. Make sure you leave a space between it and your blog title. For more info on writing in markdown see the \u003Ca href=\"https:\u002F\u002Fwww.markdownguide.org\u002Fbasic-syntax\"\u003Ebasic syntax guide\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch3 id=\"displaying-your-content\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#displaying-your-content\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EDisplaying your content\u003C\u002Fh3\u003E\u003Cp\u003ETo display our content in our page, we can use a \u003Ca href=\"\u002Fguide\u002Frouting#dynamic-routes\"\u003Edynamic page\u003C\u002Fa\u003E by prefixing the page with an underscore(\u003Ccode\u003E_\u003C\u002Fcode\u003E). By creating a page component named \u003Ccode\u003E_slug.vue\u003C\u002Fcode\u003E inside our blog folder, we are able to use the \u003Ccode\u003Eparams.slug\u003C\u002Fcode\u003E variable provides by vue router to get the name of each article. \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Etouch pages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen we can use \u003Ccode\u003EasyncData\u003C\u002Fcode\u003E in our page component to fetch our article content before the page has been rendered. We can access to our content through the context by using the variable \u003Ccode\u003E$content\u003C\u002Fcode\u003E. As we want to fetch a dynamic page we also need to know which article to fetch with \u003Ccode\u003Eparams.slug\u003C\u002Fcode\u003E which is available to us through \u003Ca href=\"\u002Fapi\u002Fcontext\"\u003Ethe context\u003C\u002Fa\u003E. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData ({ $content, params }) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F fetch our article here\u003C\u002Fspan\u003E\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EInside our \u003Ccode\u003EasyncData\u003C\u002Fcode\u003E function we create a variable named \u003Ccode\u003Earticle\u003C\u002Fcode\u003E and fetch our content using the \u003Ccode\u003Eawait\u003C\u002Fcode\u003E followed by \u003Ccode\u003E$content\u003C\u002Fcode\u003E. We need to pass into \u003Ccode\u003E$content\u003C\u002Fcode\u003E what we want to fetch, which in our case is the article folder followed by the slug, which we get from our URL params. We then chain the fetch method to the end and return the article which will contain the result of our fetch.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData ({ $content, params }) {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E article = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E $content(\u003Cspan class=\"hljs-string\"\u003E&#x27;articles&#x27;\u003C\u002Fspan\u003E, params.slug).fetch()\n\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E { article }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ETo display our content we are using the \u003Ccode\u003E&lt;nuxt-content \u002F&gt;\u003C\u002Fcode\u003E component by passing in the variable we returned into the \u003Ccode\u003Edocument\u003C\u002Fcode\u003E prop. In this example we have wrapped it in a HTML article tag as it is better semantic HTML but you can use a div or another HTML tag if you prefer. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Earticle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Enuxt-content\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:document\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Earticle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can now run our dev server and go to the route \u003Ca href=\"http:\u002F\u002Flocalhost:3000\u002Fblog\u002Fmy-first-blog-post\"\u003Ehttp:\u002F\u002Flocalhost:3000\u002Fblog\u002Fmy-first-blog-post\u003C\u002Fa\u003E and we should see our content from our markdown file. \u003C\u002Fp\u003E\n\u003Cimg alt=\"content from markdown\" src=\"\u002Fblog\u002Fcreating-blog-with-nuxt-content\u002Fget-started-with-nuxt-content.png\"\u003E\n\n\u003Ch3 id=\"default-injected-variables\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#default-injected-variables\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EDefault Injected variables\u003C\u002Fh3\u003E\u003Cp\u003EThe nuxt content module gives us access to injected variables that we can access and show in our template. Let&#39;s take a look at the default variables that are injected into our document:  \u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003Ebody\u003C\u002Fstrong\u003E: body text\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003Edir\u003C\u002Fstrong\u003E: directory\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003Eextension\u003C\u002Fstrong\u003E: file extension (.md in this example)\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003Epath\u003C\u002Fstrong\u003E: the file path\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003Eslug\u003C\u002Fstrong\u003E: the file slug\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003Etoc\u003C\u002Fstrong\u003E: an array containing our table of contents\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EcreatedAt\u003C\u002Fstrong\u003E: the file creation date\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EupdatedAt\u003C\u002Fstrong\u003E: the date of the last file update\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EWe can access all these variables by using the \u003Ccode\u003Earticle\u003C\u002Fcode\u003E variable that we created earlier. \u003Ccode\u003Earticle\u003C\u002Fcode\u003E is an object that contains all these extra injected variables that we have access to. Let&#39;s inspect them by printing it out using a \u003Ccode\u003E&lt;pre&gt;\u003C\u002Fcode\u003E tag.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Epre\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E {{ article }} \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Epre\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ENow on our page we can see we have an object with a variable property which is an empty array and a body variable which has our h1 and p tag as well as some other info that we will look at later. If we scroll down you will see we have all the other variables that we have access to. \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003E\u003Cspan class=\"hljs-string\"\u003E&quot;dir&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;\u002Farticles&quot;\u003C\u002Fspan\u003E,\n\u003Cspan class=\"hljs-string\"\u003E&quot;path&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;\u002Farticles\u002Fmy-first-blog-post&quot;\u003C\u002Fspan\u003E,\n\u003Cspan class=\"hljs-string\"\u003E&quot;extension&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;.md&quot;\u003C\u002Fspan\u003E,\n\u003Cspan class=\"hljs-string\"\u003E&quot;slug&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;my-first-blog-post&quot;\u003C\u002Fspan\u003E,\n\u003Cspan class=\"hljs-string\"\u003E&quot;createdAt&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;2020-06-22T10:58:51.640Z&quot;\u003C\u002Fspan\u003E,\n\u003Cspan class=\"hljs-string\"\u003E&quot;updatedAt&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;2020-06-22T10:59:27.863Z&quot;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThis means we can access these variables by using our article variable followed by the what we want to use. For example \u003Ccode\u003Earticle.updatedAt\u003C\u002Fcode\u003E will give us the date the post was last updated. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EPost last updated: {{ article.updatedAt }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAs you can see the date is not that human friendly. We can format this by creating a method that takes in a date and returns a new date with the options of year, month and day formatted to how we want. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003Emethods: {\n    formatDate(date) {\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E options = { \u003Cspan class=\"hljs-attr\"\u003Eyear\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;numeric&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Emonth\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;long&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Eday\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;numeric&#x27;\u003C\u002Fspan\u003E }\n      \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003EDate\u003C\u002Fspan\u003E(date).toLocaleDateString(\u003Cspan class=\"hljs-string\"\u003E&#x27;en&#x27;\u003C\u002Fspan\u003E, options)\n    }\n }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAnd then in our template we can use the formatDate method passing in the date we get from our content which will return a nicely formatted date for us. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EArticle last updated: {{ formatDate(article.updatedAt) }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"custom-injected-variables\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#custom-injected-variables\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ECustom Injected variables\u003C\u002Fh3\u003E\u003Cp\u003EWe can also add custom injected variables by adding a block of YAML front matter to our markdown file. It must be at the top the file and must be a valid YAML format set between three triple dashed lines. This is useful for adding SEO variables such as title, description and image of your article.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econtent\u002Farticles\u002Fmy-first-blog-post.md\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs yaml\"\u003E\u003Cspan class=\"hljs-meta\"\u003E---\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Etitle:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EMy\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Efirst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EBlog\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EPost\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Edescription:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003ELearning\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Ehow\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Eto\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E@nuxt\u002Fcontent\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Eto\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Ecreate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Ea\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Eblog\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Eimg:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Efirst-blog-post.jpg\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Ealt:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Emy\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Efirst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Eblog\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Epost\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E---\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe now have a title, description, img and alt variable that we can access to by using our \u003Ccode\u003Earticle\u003C\u002Fcode\u003E object variable. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Earticle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.title }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.description }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:src\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.img&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:alt\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.alt&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EArticle last updated: {{ formatDate(article.updatedAt) }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Enuxt-content\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:document\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Earticle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"styling-our-markdown-content\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#styling-our-markdown-content\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EStyling our markdown content\u003C\u002Fh3\u003E\u003Cp\u003EIf we inspect this page we can see that everything written inside our markdown is wrapped inside a div with a class of nuxt-content. That means we can easily add styles to all our elements coming from our markdown file by wrapping them in the nuxt-content class.\u003C\u002Fp\u003E\n\u003Cp\u003E \u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Estyle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"css\"\u003E\n\u003Cspan class=\"hljs-selector-class\"\u003E.nuxt-content\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-selector-tag\"\u003Eh2\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attribute\"\u003Efont-weight\u003C\u002Fspan\u003E: bold;\n  \u003Cspan class=\"hljs-attribute\"\u003Efont-size\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E28px\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-selector-class\"\u003E.nuxt-content\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-selector-tag\"\u003Eh3\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attribute\"\u003Efont-weight\u003C\u002Fspan\u003E: bold;\n  \u003Cspan class=\"hljs-attribute\"\u003Efont-size\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E22px\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-selector-class\"\u003E.nuxt-content\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-selector-tag\"\u003Ep\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attribute\"\u003Emargin-bottom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E20px\u003C\u002Fspan\u003E;\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Estyle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAll other tags that come from our YAML front matter can be styled as normal either using \u003Ca href=\"https:\u002F\u002Ftailwindcss.com\u002F\"\u003ETailwindCSS\u003C\u002Fa\u003E or adding css in the style tag.\u003C\u002Fp\u003E\n\u003Cp\u003E⚠️ Scoped styles will not work with nuxt-content so if adding then in the style tag you shouldn&#39;t use scoped. You can add the styles here or as a global style in your css folder.\u003C\u002Fp\u003E\n\u003Cp\u003EOur markdown tags are converted into the correct tags which means we now have two \u003Ccode\u003E&lt;h1&gt;\u003C\u002Fcode\u003E tags. We should now remove the one from our markdown file.\u003C\u002Fp\u003E\n\u003Ch3 id=\"adding-an-icon-to-our-headings-anchor\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#adding-an-icon-to-our-headings-anchor\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAdding an icon to our headings anchor\u003C\u002Fh3\u003E\u003Cp\u003ENotice that inside the \u003Ccode\u003E&lt;h2&gt;\u003C\u002Fcode\u003E tag there is an \u003Ccode\u003E&lt;a&gt;\u003C\u002Fcode\u003E tag with a \u003Ccode\u003Ehref\u003C\u002Fcode\u003E that includes an anchor to link to itself and a \u003Ccode\u003Espan\u003C\u002Fcode\u003E tag inside it with \u003Ccode\u003Eicon\u003C\u002Fcode\u003E and \u003Ccode\u003Eicon-link\u003C\u002Fcode\u003E classes. This is useful for linking to that section of the page. The links in the headings are empty and therefore hidden so let&#39;s add a style to them. Using the icon classes we can add an svg as a background image for our icon. You will have to first add the svg to your assets folder. In this example I have added it to an svg folder and I have taken the icon from \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fsschoger\u002Fheroicons-ui\"\u003ESteve Schoger&#39;s Hero Icons.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs css\"\u003E\u003Cspan class=\"hljs-selector-class\"\u003E.icon\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-selector-class\"\u003E.icon-link\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attribute\"\u003Ebackground-image\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eurl\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;~assets\u002Fsvg\u002Ficon-hashtag.svg&#x27;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-attribute\"\u003Edisplay\u003C\u002Fspan\u003E: inline-block;\n  \u003Cspan class=\"hljs-attribute\"\u003Ewidth\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E20px\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attribute\"\u003Eheight\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E20px\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attribute\"\u003Ebackground-size\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E20px\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E20px\u003C\u002Fspan\u003E;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"add-a-table-of-contents\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#add-a-table-of-contents\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAdd a table of contents\u003C\u002Fh3\u003E\u003Cp\u003EThe generated \u003Ccode\u003Etoc\u003C\u002Fcode\u003E variable allows us to add a table of contents to our blog post. Let&#39;s add some headings to our blog post.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs markdown\"\u003E\u003Cspan class=\"hljs-section\"\u003E## This is a heading\u003C\u002Fspan\u003E\nThis is some more info\n\n\u003Cspan class=\"hljs-section\"\u003E## This is another heading\u003C\u002Fspan\u003E\nThis is some more info\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ENow we can see these new headings inside the \u003Ccode\u003Etoc\u003C\u002Fcode\u003E array with an id, a depth and the text. The depth value refer to the heading tag value, so \u003Ccode\u003E&lt;h2&gt;\u003C\u002Fcode\u003E value is 2, \u003Ccode\u003E&lt;h3&gt;\u003C\u002Fcode\u003E value is 3, etc.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econtent\u002Farticles\u002Fmy-first-blog-post.md\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs markdown\"\u003E\u003Cspan class=\"hljs-section\"\u003E## This is a heading\u003C\u002Fspan\u003E\nThis is some more info\n\n\u003Cspan class=\"hljs-section\"\u003E### This is a sub heading\u003C\u002Fspan\u003E\nThis is some more info\n\n\u003Cspan class=\"hljs-section\"\u003E### This is another sub heading\u003C\u002Fspan\u003E\nThis is some more info\n\n\u003Cspan class=\"hljs-section\"\u003E## This is another heading\u003C\u002Fspan\u003E\nThis is some more info\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAs we have access to the \u003Ccode\u003Etoc\u003C\u002Fcode\u003E id and text we can loop over these and print each one out and use the \u003Ccode\u003E&lt;NuxtLink&gt;\u003C\u002Fcode\u003E component to link to the id of the section we want to link to. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Enav\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-for\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;link of article.toc&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:key\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;link.id&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n         \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:to\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;`#${link.id}`&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ link.text }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Enav\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ENow the ToC links are working and clicking on one will bring us to the correct part of the document. The content module automatically adds an id and a link to each heading. If we inspect one of the headings from our markdown file in our dev tools we will see our \u003Ccode\u003E&lt;h2&gt;\u003C\u002Fcode\u003E tag has an id. This is the same id that is found in the \u003Ccode\u003Etoc\u003C\u002Fcode\u003E which is basically how the \u003Ccode\u003Etoc\u003C\u002Fcode\u003E can link to the correct heading.\u003C\u002Fp\u003E\n\u003Cp\u003EWe can improve this further by using dynamic classes to style the heading classes based on the depth of the heading which we can add to our nuxt-link tag. If the link has a depth of 2 add a padding on the y axis and if the the depth is 3 add a margin left and a padding bottom. Here we are using \u003Ca href=\"https:\u002F\u002Ftailwindcss.com\u002F\"\u003ETailwindCSS\u003C\u002Fa\u003E classes but feel free to use custom class names and styles.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E:class=&quot;{\n     &#x27;py-2&#x27;: link.depth === 2,\n     &#x27;ml-2 pb-2&#x27;: link.depth === 3\n}&quot;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"use-html-into-your-markdown-files\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#use-html-into-your-markdown-files\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EUse HTML into your markdown files\u003C\u002Fh3\u003E\u003Cp\u003ESometimes we might want to add HTML to our markdown files. Let&#39;s add a div with some classes so it has a background color of blue with white text, some padding and a margin bottom.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econtent\u002Farticles\u002Fmy-first-blog-post.md\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eclass\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;bg-blue-500 text-white p-4 mb-4&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  This is HTML inside markdown that has a class of note\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"adding-a-vue-component\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#adding-a-vue-component\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAdding a Vue component\u003C\u002Fh3\u003E\u003Cp\u003EWe can also add Vue components inside our markdown files. This means if we are re-using components such as an info or alert box, we can create one with the styles we need and pass in the text as a slot.\u003C\u002Fp\u003E\n\u003Cp\u003EWe can now add components to our application by setting the property \u003Ccode\u003Ecomponents\u003C\u002Fcode\u003E to \u003Ccode\u003Etrue\u003C\u002Fcode\u003E in our \u003Ccode\u003Enuxt.config file\u003C\u002Fcode\u003E. (since v2.13)\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ecomponents\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAuto importing components will not work for \u003Ccode\u003E&lt;nuxt-content&gt;\u003C\u002Fcode\u003E unless we globally register them by adding a global folder inside the components folder.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Emkdir components\u002Fglobal\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can then create our InfoBox component inside this folder.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecomponents\u002Fglobal\u002FInfoBox.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eclass\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;bg-blue-500 text-white p-4 mb-4&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eslot\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;info-box&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003Edefault\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eslot\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen in our markdown these components will be available without having to import them. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econtent\u002Farticles\u002Fmy-first-blog-post.md\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs markdown\"\u003E\u003Cspan class=\"xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Einfo-box\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  \u003Cspan class=\"xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E #\u003Cspan class=\"hljs-attr\"\u003Einfo-box\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-code\"\u003E    This is a vue component inside markdown using slots\n  &lt;\u002Ftemplate&gt;\n&lt;\u002Finfo-box&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Warning\"\u003E\n\n\u003Cp\u003EThe global components will be available throughout our whole application so be careful when adding components to this folder. This works different to adding components in the components folder which are only added if they are being used.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch3 id=\"adding-an-author-component-with-props\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#adding-an-author-component-with-props\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAdding an Author component with props\u003C\u002Fh3\u003E\u003Cp\u003EAn other advantage of the YAML properties is that we can make them available to our component through props. For example, we can have an about the author component and if we have guest bloggers the author will change. \nIn our markdown file we can add a new object to our frontmatter which contains the author&#39;s name and bio and image. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econtent\u002Farticles\u002Fmy-first-blog-post.md\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs yaml\"\u003E\u003Cspan class=\"hljs-meta\"\u003E---\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Eauthor:\u003C\u002Fspan\u003E \n    \u003Cspan class=\"hljs-attr\"\u003Ename:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EBenjamin\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Ebio:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EAll\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Eabout\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EBenjamin\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eimage:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Ehttps:\u002F\u002Fimages.unsplash.com\u002F.....\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E---\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can now create the author component. \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Etouch components\u002Fglobal\u002FAuthor.vue\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EHere we create a div the author image, a title of Author and a dynamic name and bio of the author. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecomponents\u002Fglobal\u002FAuthor.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:src\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;author.img&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh4\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EAuthor\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh4\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ author.name }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ author.bio }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EStyles have been removed from these examples, feel free to add the styles yourself or copy the styles from the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt-company\u002Fdemo-blog-nuxt-content\"\u003Edemo code\u003C\u002Fa\u003E. \u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EThen in our script tag we can add our props of author which is an object and set required to true.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecomponents\u002Fglobal\u002FAuthor.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eprops\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eauthor\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Etype\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003EObject\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"hljs-attr\"\u003Erequired\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E\n    }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ETo use the component we will need to add it to our markdown and pass in our props. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econtent\u002Farticles\u002Fmy-first-blog-post.md\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs markdown\"\u003E\u003Cspan class=\"xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eauthor\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:author\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;author&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EPutting the component here means we will have to repeat it for every article. In this case it would be better to add it directly to the slug page. We will need to change the author prop to \u003Ccode\u003Earticle.author\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Earticle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.title }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.description }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:src\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.img&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:alt\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.alt&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EArticle last updated: {{ formatDate(article.updatedAt) }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Enuxt-content\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:document\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eauthor\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:author\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.author&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Earticle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can now move this component out of the global folder and into the components folder directly and it will be auto imported into our slug page as we are using it in the template.\u003C\u002Fp\u003E\n\u003Ch3 id=\"adding-a-code-block-to-your-post\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#adding-a-code-block-to-your-post\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAdding a code block to your post\u003C\u002Fh3\u003E\u003Cp\u003EWith the content module we can style our code blocks with to the automatic inclusion of \u003Ca href=\"https:\u002F\u002Fprismjs.com\u002F\"\u003EprismJS\u003C\u002Fa\u003E. That means we can write our code block using the correct markdown syntax and our code block will display with styling depending on the language.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Econtent\u002Farticles\u002Fmy-first-blog-post.md\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Enuxt\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;is the best&quot;\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003Ecode styling is easy\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can also add the file name of the code block by adding it inside square brackets after the code block&#39;s language.\nFor example: js[my-first-blog-post.md]\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js[my-first-blog-post.md]\"\u003Eexport default {\n  nuxt: \"is the best\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThe filename will be converted to a span with a filename class which we can then style how we like. For this example I am using tailwind classes but you can use ordinary CSS if you prefer.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eassets\u002Fcss\u002Ftailwind.css\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs css\"\u003E.nuxt-content-highlight {\n  @apply relative;\n}\n.nuxt-content-highlight .filename {\n  @apply absolute right-0 text-gray-600 font-light z-10 mr-2 mt-1 text-sm;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EDifferent theme can be used, for example \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FPrismJS\u002Fprism-themes\"\u003Eprism-themes\u003C\u002Fa\u003E, we can install it and then add our preferred theme to the content options of your \u003Ccode\u003Enuxt.config file\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install prism-themes\n\u002F\u002F or\nyarn add prism-themes\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThen in our \u003Ccode\u003Enuxt.config\u003C\u002Fcode\u003E file, in the content options, we can add a markdown object with prism and add the theme that we want to use. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003Econtent: {\n  \u003Cspan class=\"hljs-attr\"\u003Emarkdown\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eprism\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Etheme\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;prism-themes\u002Fthemes\u002Fprism-material-oceanic.css&#x27;\u003C\u002Fspan\u003E\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"creating-a-previous-and-next-component\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#creating-a-previous-and-next-component\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ECreating a previous and next component\u003C\u002Fh3\u003E\u003Cp\u003EWe now have a pretty complete blog post but wouldn&#39;t it be great if users could easily go from one post to another. First let&#39;s duplicate our post so we have 3 posts. Then, let&#39;s create a new component for our prev and next posts. \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Etouch components\u002FPrevNext.vue\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIn this component we use a \u003Ccode\u003Ev-if\u003C\u002Fcode\u003E inside our \u003Ccode\u003ENuxtLink\u003C\u002Fcode\u003E component to see if there is a previous blog post and if there is we add a link to it. We can print out the title of our article using the \u003Ccode\u003Eprev\u003C\u002Fcode\u003E and \u003Ccode\u003Enext\u003C\u002Fcode\u003E variables as these contain all the information from the article. This means we could create a card with an image and description to show the next and previous article but for this example we will just display the title. If there isn&#39;t a previous post we just print an empty span which is useful for styling purposes. We then do the exact same with our next link.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecomponents\u002FPrevNext.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eclass\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;flex justify-between&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Ev-if\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;prev&quot;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-attr\"\u003E:to\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;{ name: &#x27;blog-slug&#x27;, params: { slug: prev.slug } }&quot;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Eclass\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;text-primary font-bold hover:underline&quot;\u003C\u002Fspan\u003E\n    &gt;\u003C\u002Fspan\u003E\n      {{ prev.title }}\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-else\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-symbol\"\u003E&amp;nbsp;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Ev-if\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;next&quot;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003E:to\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;{ name: &#x27;blog-slug&#x27;, params: { slug: next.slug } }&quot;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Eclass\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;font-bold hover:underline&quot;\u003C\u002Fspan\u003E\n    &gt;\u003C\u002Fspan\u003E\n      {{ next.title }}\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-else\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-symbol\"\u003E&amp;nbsp;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EIn our component we pass the props \u003Ccode\u003Eprev\u003C\u002Fcode\u003E and \u003Ccode\u003Enext\u003C\u002Fcode\u003E to makes them available to us on our blog post page. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecomponents\u002FPrevNext.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Eprops\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eprev\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Etype\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003EObject\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"hljs-attr\"\u003Edefault\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n    },\n    \u003Cspan class=\"hljs-attr\"\u003Enext\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Etype\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003EObject\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"hljs-attr\"\u003Edefault\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n    }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can now get our prev and next articles by adding them to our \u003Ccode\u003EasyncData\u003C\u002Fcode\u003E. We create an array of const with with the name \u003Ccode\u003Eprev\u003C\u002Fcode\u003E and \u003Ccode\u003Enext\u003C\u002Fcode\u003E and we await the content from the articles folder. This time we only need the title and the slug so we can chain \u003Ccode\u003Eonly()\u003C\u002Fcode\u003E to our await and pass in title and slug. \u003C\u002Fp\u003E\n\u003Cp\u003EWe can use the \u003Ccode\u003EsortBy()\u003C\u002Fcode\u003E method to sort our data by the createdAt date in ascending order. We then use the \u003Ccode\u003Esurround()\u003C\u002Fcode\u003E method and pass in the slug from params so that it can get the correct  slug for the previous and next posts. \u003C\u002Fp\u003E\n\u003Cp\u003EWe then return prev and next just like we did with article.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData({ $content, params }) {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E article = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E $content(\u003Cspan class=\"hljs-string\"\u003E&#x27;articles&#x27;\u003C\u002Fspan\u003E, params.slug).fetch()\n\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [prev, next] = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E $content(\u003Cspan class=\"hljs-string\"\u003E&#x27;articles&#x27;\u003C\u002Fspan\u003E)\n      .only([\u003Cspan class=\"hljs-string\"\u003E&#x27;title&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;slug&#x27;\u003C\u002Fspan\u003E])\n      .sortBy(\u003Cspan class=\"hljs-string\"\u003E&#x27;createdAt&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;asc&#x27;\u003C\u002Fspan\u003E)\n      .surround(params.slug)\n      .fetch()\n\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n      article,\n      prev,\n      next\n    }\n  },\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can now add our \u003Ccode\u003E&lt;prev-next&gt;\u003C\u002Fcode\u003E component to our slug page passing in the props of prev and next.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Earticle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.title }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.description }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:src\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.img&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:alt\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.alt&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EArticle last updated: {{ formatDate(article.updatedAt) }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Enuxt-content\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:document\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eauthor\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:author\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.author&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eprev-next\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:prev\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;prev&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:next\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;next&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Earticle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EAs we have set \u003Ccode\u003Ecomponents: true\u003C\u002Fcode\u003E in our nuxt.config file we do not need to import this component in order to be able to use it.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch3 id=\"working-with-the-api\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#working-with-the-api\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EWorking with the API\u003C\u002Fh3\u003E\u003Cp\u003EWhen querying data the Content module gives us access to the API so that we can query it directly to see what is being returned. We have access to the API in dev mode with the following url: \u003Ca href=\"http:\u002F\u002Flocalhost:3000\u002F_content\u002F\"\u003Ehttp:\u002F\u002Flocalhost:3000\u002F_content\u002F\u003C\u002Fa\u003E. In our example this will be empty as our articles are in a folder called articles therefore we need to use this url \u003Ca href=\"http:\u002F\u002Flocalhost:3000\u002F_content\u002Farticles\"\u003Ehttp:\u002F\u002Flocalhost:3000\u002F_content\u002Farticles\u003C\u002Fa\u003E to see our list of articles. \u003C\u002Fp\u003E\n\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EWe can see individual articles by adding the name of the slug \u003Ca href=\"http:\u002F\u002Flocalhost:3000\u002F_content\u002Farticles\u002Fmy-first-blog-post\"\u003Ehttp:\u002F\u002Flocalhost:3000\u002F_content\u002Farticles\u002Fmy-first-blog-post\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EYou can use a chrome extension such as \u003Ca href=\"https:\u002F\u002Fchrome.google.com\u002Fwebstore\u002Fdetail\u002Fjson-viewer-awesome\u002Fiemadiahhbebdklepanmkjenfdebfpfe?hl=en\"\u003EJSON Viewer Awesome\u003C\u002Fa\u003E so you can better see your results.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EWe can now query our results directly in the url and see our results as a JSON which we can then use to create our blog index page that will have a list of all the blog posts. We can see using our API what we have available to us and for the blog index page we only want to return the title, description, img, slug and author. Let&#39;s take a look at what that would be like. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"http:\u002F\u002Flocalhost:3000\u002F_content\u002Farticles?only=title&amp;only=description&amp;only=img&amp;only=slug&amp;only=author\"\u003Ehttp:\u002F\u002Flocalhost:3000\u002F_content\u002Farticles?only=title&amp;only=description&amp;only=img&amp;only=slug&amp;only=author\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cvideo poster=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Fcontent-api_aocbcn.jpg\" loop=\"loop\" plays-inline=\"true\" controls=\"controls\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Fcontent-api_aocbcn.webm\" type=\"video\u002Fwebm\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1592314331\u002Fcontent-api_aocbcn.mp4\" type=\"video\u002Fmp4\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Fcontent-api_aocbcn.ogv\" type=\"video\u002Fogg\"\u003E\n\u003C\u002Fvideo\u003E\n\n\n\u003Ch3 id=\"list-all-the-blog-posts\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#list-all-the-blog-posts\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EList all the blog posts\u003C\u002Fh3\u003E\u003Cp\u003EWe can now create our blog index page to list out our blog posts. As we already have an index page created we just need to delete all the demo code inside this page.\u003C\u002Fp\u003E\n\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EIn the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt-company\u002Fdemo-blog-nuxt-content\"\u003Edemo code\u003C\u002Fa\u003E I used the main index page instead of creating an index file inside the blog folder because for this example I have no other pages but normally you might have a home page, contact page and then the blog page etc.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EPassing in \u003Ccode\u003E$content\u003C\u002Fcode\u003E and \u003Ccode\u003Eparams\u003C\u002Fcode\u003E to the context in our \u003Ccode\u003EasyncData\u003C\u002Fcode\u003E function we then use a const of articles to await our returned content by passing into \u003Ccode\u003E$content\u003C\u002Fcode\u003E the arguments of articles, as that is the folder where our articles are and our slug from params. We can then use \u003Ccode\u003Eonly()\u003C\u002Fcode\u003E to get our title, description, img, slug and author as we tested from our API this will give us exactly what we need. We can use \u003Ccode\u003EsortBy()\u003C\u002Fcode\u003E to sort by the createdAt date and then we chain our \u003Ccode\u003Efetch()\u003C\u002Fcode\u003E to the end and return our articles.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002Findex.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData({ $content, params }) {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E articles = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E $content(\u003Cspan class=\"hljs-string\"\u003E&#x27;articles&#x27;\u003C\u002Fspan\u003E, params.slug)\n      .only([\u003Cspan class=\"hljs-string\"\u003E&#x27;title&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;description&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;img&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;slug&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;author&#x27;\u003C\u002Fspan\u003E])\n      .sortBy(\u003Cspan class=\"hljs-string\"\u003E&#x27;createdAt&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;asc&#x27;\u003C\u002Fspan\u003E)\n      .fetch()\n\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n      articles\n    }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EOur articles are now available to us just like any data property so we can use it in our template using a \u003Ccode\u003Ev-for\u003C\u002Fcode\u003E to loop over all the articles and print out the article title and author name, the description the date it was updated and the image using the \u003Ccode\u003E&lt;NuxtLink&gt;\u003C\u002Fcode\u003E component to link to the slug of the article.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EBlog Posts\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-for\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article of articles&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:key\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.slug&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:to\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;{ name: &#x27;blog-slug&#x27;, params: { slug: article.slug } }&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:src\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.img&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh2\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.title }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh2\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003Eby {{ article.author.name }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.description }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"using-the-where-query-to-create-an-author-page\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#using-the-where-query-to-create-an-author-page\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EUsing the where query to create an Author page\u003C\u002Fh3\u003E\u003Cp\u003EWith the content module we can also filter out results using the where query. We could have an author page that shows the author details and all posts by that author.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Etouch pages\u002Fblog\u002Fauthor\u002F_author.vue\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EJust like before we use asyncData to fetch our data but this time we add in a where() method. We want to get the posts where the author is the same as the author name that comes from params. \u003C\u002Fp\u003E\n\u003Cp\u003EFor example: \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"http:\u002F\u002Flocalhost:3000\u002F_content\u002Farticles?author.name=Maria\"\u003Ehttp:\u002F\u002Flocalhost:3000\u002F_content\u002Farticles?author.name=Maria\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EBecause we have used an object for our author we need to add nestedProperties as an option to our content property in our nuxt.config file and pass in what we want to query (only for dot notation queries).\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Econtent\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003EnestedProperties\u003C\u002Fspan\u003E: [\n        \u003Cspan class=\"hljs-string\"\u003E&#x27;author.name&#x27;\u003C\u002Fspan\u003E\n      ]\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAs we can see we get all our data back only for the author Maria. If we were to use maria without a capital letter we wouldn&#39;t get anything back. We can therefore use \u003Ccode\u003E$regex\u003C\u002Fcode\u003E so that it remains with a capital letter. \u003C\u002Fp\u003E\n\u003Cp\u003EWe then fetch all the details we want to show on this page. In the last example we used the \u003Ccode\u003Eonly()\u003C\u002Fcode\u003E method to return what we wanted but as we require quite a lot of content we can instead use the \u003Ccode\u003Ewithout()\u003C\u002Fcode\u003E method and pass in what we don&#39;t wan&#39;t to return which is the body of the post. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002Fauthor\u002F_author.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E asyncData({ $content, params }) {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E articles = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E $content(\u003Cspan class=\"hljs-string\"\u003E&#x27;articles&#x27;\u003C\u002Fspan\u003E, params.slug)\n      .where({\n        \u003Cspan class=\"hljs-string\"\u003E&#x27;author.name&#x27;\u003C\u002Fspan\u003E: {\n          \u003Cspan class=\"hljs-attr\"\u003E$regex\u003C\u002Fspan\u003E: [params.author, \u003Cspan class=\"hljs-string\"\u003E&#x27;i&#x27;\u003C\u002Fspan\u003E]\n        }\n      })\n      .without(\u003Cspan class=\"hljs-string\"\u003E&#x27;body&#x27;\u003C\u002Fspan\u003E)\n      .sortBy(\u003Cspan class=\"hljs-string\"\u003E&#x27;createdAt&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;asc&#x27;\u003C\u002Fspan\u003E)\n      .fetch()\n\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n      articles\n    }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EYou can use an array and pass in more than just &#39;body&#39; to the \u003Ccode\u003Ewithout()\u003C\u002Fcode\u003E method:\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003Ewithout([\u003Cspan class=\"hljs-string\"\u003E&#x27;body&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;title&#x27;\u003C\u002Fspan\u003E])\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can then use our data to print out a nice author page showing the author name and bio as well as each post. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002Fauthor\u002F_author.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EAuthor: {{ articles[0].author.name }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EBio: {{ articles[0].author.bio }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh3\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EHere are a list of articles by {{ articles[0].author.name }}:\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh3\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-for\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article in articles&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:key\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.slug&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:to\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;{ name: &#x27;blog-slug&#x27;, params: { slug: article.slug } }&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:src\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.img&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:alt\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.alt&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh2\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.title }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh2\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ article.description }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ formatDate(article.updatedAt) }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003EPlease note all styles have been removed from this example. You can either style the page yourself or copy the styles from the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt-company\u002Fdemo-blog-nuxt-content\"\u003Edemo code\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003ETo format our date we can add the method we created earlier:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002Fblog\u002Fauthor\u002F_author.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003Emethods: {\n    formatDate(date) {\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E options = { \u003Cspan class=\"hljs-attr\"\u003Eyear\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;numeric&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Emonth\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;long&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Eday\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;numeric&#x27;\u003C\u002Fspan\u003E }\n      \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003EDate\u003C\u002Fspan\u003E(date).toLocaleDateString(\u003Cspan class=\"hljs-string\"\u003E&#x27;en&#x27;\u003C\u002Fspan\u003E, options)\n    }\n  }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAnd of course we should link from our blog post to our new author page.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecomponents\u002FAuthor.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:to\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;`\u002Fblog\u002Fauthor\u002F${author.name}`&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:src\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;author.img&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh4\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EAuthor\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh4\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ author.name }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ author.bio }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"add-a-search-field\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#add-a-search-field\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAdd a search field\u003C\u002Fh3\u003E\u003Cp\u003EThe Nuxt content module gives us the possibility of searching through our articles by using the \u003Ccode\u003Esearch()\u003C\u002Fcode\u003E method.\u003C\u002Fp\u003E\n\u003Cp\u003ELet&#39;s first create a search component.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Etouch components\u002FAppSearchInput.vue\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe then add a data property which will return the searchQuery which starts off as an empty string and the articles array which is also empty. We then use the watch method from Vue to watch our searchQuery function passing in the argument of searchQuery. If there is no searchQuery then the articles array is empty and we just call return. If not we get our articles and await our \u003Ccode\u003E$content\u003C\u002Fcode\u003E passing in articles. We can now use the \u003Ccode\u003Elimit()\u003C\u002Fcode\u003E method to limit the number of returned results and then we use the \u003Ccode\u003Esearch()\u003C\u002Fcode\u003E method passing in our searchQuery as an argument and then we chain the \u003Ccode\u003Efetch()\u003C\u002Fcode\u003E method to the end. \u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecomponents\u002FAppSearchInput.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  data() {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n      \u003Cspan class=\"hljs-attr\"\u003EsearchQuery\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"hljs-attr\"\u003Earticles\u003C\u002Fspan\u003E: []\n    }\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Ewatch\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E searchQuery(searchQuery) {\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!searchQuery) {\n        \u003Cspan class=\"hljs-built_in\"\u003Ethis\u003C\u002Fspan\u003E.articles = []\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E\n      }\n      \u003Cspan class=\"hljs-built_in\"\u003Ethis\u003C\u002Fspan\u003E.articles = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Ethis\u003C\u002Fspan\u003E.$content(\u003Cspan class=\"hljs-string\"\u003E&#x27;articles&#x27;\u003C\u002Fspan\u003E)\n        .limit(\u003Cspan class=\"hljs-number\"\u003E6\u003C\u002Fspan\u003E)\n        .search(searchQuery)\n        .fetch()\n    }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ENext we need to add to our template an input and using \u003Ccode\u003Ev-model\u003C\u002Fcode\u003E we connect it to our SearchQuery data property. Then if there are articles we use a \u003Ccode\u003Ev-for\u003C\u002Fcode\u003E to list out the articles using the \u003Ccode\u003E&lt;NuxtLink&gt;\u003C\u002Fcode\u003E component to link to them.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecomponents\u002FAppSearchInput.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Einput\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Ev-model\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;searchQuery&quot;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Etype\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;search&quot;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Eautocomplete\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;off&quot;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Eplaceholder\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;Search Articles&quot;\u003C\u002Fspan\u003E\n    \u002F&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-if\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;articles.length&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-for\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article of articles&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:key\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.slug&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E:to\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;{ name: &#x27;blog-slug&#x27;, params: { slug: article.slug } }&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n          {{ article.title }}\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003ENuxtLink\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EWe can now use our \u003CAppSearchInput\u003E component by adding it anywhere on our page.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Epages\u002F_slug.vue\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EAppSearchInput\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert\"\u003E\n\n\u003Cp\u003ESee the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt-company\u002Fdemo-blog-nuxt-content\"\u003Edemo code\u003C\u002Fa\u003E for improved styling of this page as well as the header component that was added which includes the search component and is therefore displayed on the author and index page.\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch2 id=\"live-editing-our-content\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#live-editing-our-content\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ELive editing our content\u003C\u002Fh2\u003E\u003Cp\u003EOur blog is looking really great and if we need to modify any of the content on the page we can do so directly in the browser thanks to the live edit feature. All you have to do is double click on your page while in dev mode and and the live edit will open. Here you can modify any of your text and also the front matter. You can even add a component that is in the global components folder and just by clicking away you will see your changes live in the browser and you will see in your editor and console that the file has been modified and saved. \u003C\u002Fp\u003E\n\u003Cvideo poster=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Flive-edit-content_kdorvi.jpg\" loop=\"loop\" plays-inline=\"true\" controls=\"controls\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Flive-edit-content_kdorvi.webm\" type=\"video\u002Fwebm\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1592314331\u002Flive-edit-content_kdorvi.mp4\" type=\"video\u002Fmp4\"\u003E\n  \u003Csource src=\"https:\u002F\u002Fres.cloudinary.com\u002Fnuxt\u002Fvideo\u002Fupload\u002Fv1588091670\u002Flive-edit-content_kdorvi.ogv\" type=\"video\u002Fogg\"\u003E\n\u003C\u002Fvideo\u003E\n\n\u003Ch2 id=\"generating-our-content\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#generating-our-content\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EGenerating our content\u003C\u002Fh2\u003E\u003Cp\u003EIf we now want to deploy our amazing new blog we can run the \u003Ccode\u003Enuxt build\u003C\u002Fcode\u003E and \u003Ccode\u003Enuxt export\u003C\u002Fcode\u003E command. The \u003Ccode\u003Enuxt build\u003C\u002Fcode\u003E command will build our app adding all our webpack assets and creating .js bundles for us. We can then run the \u003Ccode\u003Enuxt export\u003C\u002Fcode\u003E command which will export our html, css, js and images as static assets. You will also notice that we didn&#39;t have to add a routes property or do anything to get our new page as the \u003Cstrong\u003Ecrawler\u003C\u002Fstrong\u003E will crawl all links for us and generate our dynamic routes for us.\u003C\u002Fp\u003E\n\u003Cp\u003EWe can then use the \u003Ccode\u003Enuxt serve\u003C\u002Fcode\u003E command which will serve our production ready static site so we can see it in our browser before deploying.\u003C\u002Fp\u003E\n\u003Cp\u003EBy separating our content from our build it means we can now add a new markdown page and this time we only need to run \u003Ccode\u003Enuxt export\u003C\u002Fcode\u003E and we will see our new page with our new content in seconds. We only need to run \u003Ccode\u003Enuxt build\u003C\u002Fcode\u003E if we are modifying our .vue pages or components or anything that is not in our content folder. \u003C\u002Fp\u003E\n\u003Ch2 id=\"conclusion\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EConclusion\u003C\u002Fh2\u003E\u003Cp\u003EWorking with content is great fun and there is so much more you can do and build. Don&#39;t forget to showcase your work to use on our discord channel named \u003Cstrong\u003Eshowcase\u003C\u002Fstrong\u003E so we can see the cool things you have created and perhaps even feature them in our NuxtLetter. Not signed up yet? Well now is a great time to \u003Ca href=\"https:\u002F\u002Fnuxtjs.org\u002F#subscribe-to-newsletter\"\u003Esign up\u003C\u002Fa\u003E as we keep releasing more new content and features for Nuxt.js. Enjoy :)\u003C\u002Fp\u003E\n",links:{previous:{title:a,slug:a},next:{title:"Improve Your Developer Experience With Nuxt Components",slug:"improve-your-developer-experience-with-nuxt-components"}}}}],fetch:[],mutations:[]}}(null)));