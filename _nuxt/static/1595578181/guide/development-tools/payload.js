__NUXT_JSONP__("/guide/development-tools", {data:[{},{path:"\u002Fzh\u002Fguide\u002Fdevelopment-tools",section:"guide",page:{attrs:{title:"开发工具",description:"Nuxt.js 可让你的 Web 开发过程更愉悦。"},body:"\u003Cblockquote\u003E\n\u003Cp\u003E测试是 Web 应用开发过程中不可获缺的工作。Nuxt.js 尽量帮助你简化这部分工作。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"端对端测试\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#端对端测试\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E端对端测试\u003C\u002Fh2\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Favajs\u002Fava\"\u003E\u003Ccode\u003Eava\u003C\u002Fcode\u003E\u003C\u002Fa\u003E 是一个很强大的 JavaScript 测试框架，结合 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ftmpvar\u002Fjsdom\"\u003E\u003Ccode\u003Ejsdom\u003C\u002Fcode\u003E\u003C\u002Fa\u003E，我们就可以轻松地给 \u003Ccode\u003Enuxt\u003C\u002Fcode\u003E 应用进行端对端测试。\u003C\u002Fp\u003E\n\u003Cp\u003E首先，我们需要添加 \u003Ccode\u003Eava\u003C\u002Fcode\u003E 和 \u003Ccode\u003Ejsdom\u003C\u002Fcode\u003E 作为项目的开发依赖：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install --save-dev ava jsdom\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E然后在 \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E 中添加测试脚本，并配置 ava 如果编译待测试的文件：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003Epackage.json\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-string\"\u003E&quot;scripts&quot;\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E&quot;test&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;ava&quot;\u003C\u002Fspan\u003E,\n},\n\u003Cspan class=\"hljs-string\"\u003E&quot;ava&quot;\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E&quot;require&quot;\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E&quot;babel-register&quot;\u003C\u002Fspan\u003E\n  ]\n},\n\u003Cspan class=\"hljs-string\"\u003E&quot;babel&quot;\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E&quot;presets&quot;\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E&quot;es2015&quot;\u003C\u002Fspan\u003E\n  ]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E接下来我们可以在 \u003Ccode\u003Etest\u003C\u002Fcode\u003E 目录下编写单元测试的逻辑代码：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Emkdir \u003Cspan class=\"hljs-built_in\"\u003Etest\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E假设我们有这样一个页面 \u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eclass\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;red&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EHello {{ name }}!\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"javascript\"\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  data () {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;world&#x27;\u003C\u002Fspan\u003E }\n  }\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Escript\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Estyle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"css\"\u003E\n\u003Cspan class=\"hljs-selector-class\"\u003E.red\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attribute\"\u003Ecolor\u003C\u002Fspan\u003E: red;\n}\n\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Estyle\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E当我们利用 \u003Ccode\u003Enpm run dev\u003C\u002Fcode\u003E 启动开发服务器的时候，用浏览器打开 \u003Ca href=\"http:\u002F\u002Flocalhost:3000\"\u003Ehttp:\u002F\u002Flocalhost:3000\u003C\u002Fa\u003E，我们能看到红色的 \u003Ccode\u003EHello world\u003C\u002Fcode\u003E 标题。\u003C\u002Fp\u003E\n\u003Cp\u003E添加一个单元测试文件 \u003Ccode\u003Etest\u002Findex.test.js\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { resolve } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;path&#x27;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E test \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;ava&#x27;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { Nuxt, Builder } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;nuxt&#x27;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 我们用一个变量保留 nuxt 和 server 实例的引用\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 这样可以在单元测试结束之后关掉它们\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E nuxt = \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 初始化 Nuxt.js 并创建一个监听 localhost:4000 的服务器\u003C\u002Fspan\u003E\ntest.before(\u003Cspan class=\"hljs-string\"\u003E&#x27;Init Nuxt.js&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E (t) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E rootDir = resolve(__dirname, \u003Cspan class=\"hljs-string\"\u003E&#x27;..&#x27;\u003C\u002Fspan\u003E)\n  \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E config = {}\n  \u003Cspan class=\"hljs-keyword\"\u003Etry\u003C\u002Fspan\u003E { config = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(resolve(rootDir, \u003Cspan class=\"hljs-string\"\u003E&#x27;nuxt.config.js&#x27;\u003C\u002Fspan\u003E)) } \u003Cspan class=\"hljs-keyword\"\u003Ecatch\u003C\u002Fspan\u003E (e) {}\n  config.rootDir = rootDir \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 项目目录\u003C\u002Fspan\u003E\n  config.dev = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 生产构建模式\u003C\u002Fspan\u003E\n  nuxt = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Nuxt(config)\n  \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Builder(nuxt).build()\n  nuxt.listen(\u003Cspan class=\"hljs-number\"\u003E4000\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;localhost&#x27;\u003C\u002Fspan\u003E)\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 测试生成的html\u003C\u002Fspan\u003E\ntest(\u003Cspan class=\"hljs-string\"\u003E&#x27;路由 \u002F 有效且能渲染 HTML&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E (t) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E context = {}\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { html } = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E nuxt.renderRoute(\u003Cspan class=\"hljs-string\"\u003E&#x27;\u002F&#x27;\u003C\u002Fspan\u003E, context)\n  t.true(html.includes(\u003Cspan class=\"hljs-string\"\u003E&#x27;&lt;h1 class=&quot;red&quot;&gt;Hello world!&lt;\u002Fh1&gt;&#x27;\u003C\u002Fspan\u003E))\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 测试元素的有效性\u003C\u002Fspan\u003E\ntest(\u003Cspan class=\"hljs-string\"\u003E&#x27;路由 \u002F 有效且渲染的HTML有特定的CSS样式&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E (t) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Ewindow\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E nuxt.renderAndGetWindow(\u003Cspan class=\"hljs-string\"\u003E&#x27;http:\u002F\u002Flocalhost:4000\u002F&#x27;\u003C\u002Fspan\u003E)\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E element = \u003Cspan class=\"hljs-built_in\"\u003Ewindow\u003C\u002Fspan\u003E.document.querySelector(\u003Cspan class=\"hljs-string\"\u003E&#x27;.red&#x27;\u003C\u002Fspan\u003E)\n  t.not(element, \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E)\n  t.is(element.textContent, \u003Cspan class=\"hljs-string\"\u003E&#x27;Hello world!&#x27;\u003C\u002Fspan\u003E)\n  t.is(element.className, \u003Cspan class=\"hljs-string\"\u003E&#x27;red&#x27;\u003C\u002Fspan\u003E)\n  t.is(\u003Cspan class=\"hljs-built_in\"\u003Ewindow\u003C\u002Fspan\u003E.getComputedStyle(element).color, \u003Cspan class=\"hljs-string\"\u003E&#x27;red&#x27;\u003C\u002Fspan\u003E)\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 关掉服务器和Nuxt实例，停止文件监听。\u003C\u002Fspan\u003E\ntest.after(\u003Cspan class=\"hljs-string\"\u003E&#x27;Closing server and nuxt.js&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Et\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E {\n  nuxt.close()\n})\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E运行上面的单元测试：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm \u003Cspan class=\"hljs-built_in\"\u003Etest\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E实际上 \u003Ccode\u003Ejsdom\u003C\u002Fcode\u003E 会有一定的限制性，因为它背后并没有使用任何的浏览器引擎，但是也能涵盖大部分关于 dom元素 的测试了。\n如果想使用真实的浏览器引擎来测试你的应用，推荐瞅瞅 \u003Ca href=\"http:\u002F\u002Fnightwatchjs.org\"\u003ENightwatch.js\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003Ch2 id=\"eslint\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#eslint\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EESLint\u003C\u002Fh2\u003E\u003Cblockquote\u003E\n\u003Cp\u003EESLint 是一个很棒的工具，帮助我们提升代码的规范和质量。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E在 Nuxt.js 中集成 \u003Ca href=\"http:\u002F\u002Feslint.org\"\u003EESLint\u003C\u002Fa\u003E 是非常简单的，首先我们需要安装 ESLint 的一系列依赖包：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install --save-dev babel-eslint eslint eslint-config-standard eslint-plugin-html eslint-plugin-promise eslint-plugin-standard eslint-plugin-import eslint-plugin-node\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E然后, 在项目根目录下创建 \u003Ccode\u003E.eslintrc.js\u003C\u002Fcode\u003E 文件用于配置 ESLint：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-built_in\"\u003Emodule\u003C\u002Fspan\u003E.exports = {\n  \u003Cspan class=\"hljs-attr\"\u003Eroot\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Eenv\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Ebrowser\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Enode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003EparserOptions\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eparser\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;babel-eslint&#x27;\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Eextends\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;eslint:recommended&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F https:\u002F\u002Fgithub.com\u002Fvuejs\u002Feslint-plugin-vue#priority-a-essential-error-prevention\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F consider switching to `plugin:vue\u002Fstrongly-recommended` or `plugin:vue\u002Frecommended` for stricter rules.\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;plugin:vue\u002Frecommended&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;plugin:prettier\u002Frecommended&#x27;\u003C\u002Fspan\u003E\n  ],\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 校验 .vue 文件\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;vue&#x27;\u003C\u002Fspan\u003E\n  ],\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 自定义规则\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Erules\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;semi&#x27;\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;never&#x27;\u003C\u002Fspan\u003E],\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;no-console&#x27;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;off&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;vue\u002Fmax-attributes-per-line&#x27;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;off&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-string\"\u003E&#x27;prettier\u002Fprettier&#x27;\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E&#x27;error&#x27;\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-string\"\u003E&#x27;semi&#x27;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E }]\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E最后，我们在 \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E 文件中添加一个 \u003Ccode\u003Elint\u003C\u002Fcode\u003E和 \u003Ccode\u003Elintfix\u003C\u002Fcode\u003E脚本命令：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-string\"\u003E&quot;scripts&quot;\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E&quot;lint&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;eslint --ext .js,.vue --ignore-path .gitignore .&quot;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-string\"\u003E&quot;lintfix&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;eslint --fix --ext .js,.vue --ignore-path .gitignore .&quot;\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E你现在可以启动\u003Ccode\u003Elint\u003C\u002Fcode\u003E来检查错误：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm run lint\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E或者 \u003Ccode\u003Elintfix\u003C\u002Fcode\u003E 还可以修复那些可修复的\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm run lintfix\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EESLint将检测校验所有JavaScript和Vue文件，同时忽略\u003Ccode\u003E.gitignore\u003C\u002Fcode\u003E中定义的被忽略文件。\u003C\u002Fp\u003E\n\u003Cp\u003E还建议通过webpack启用ESLint热更新模式。这样ESLint将在\u003Ccode\u003Enpm run dev\u003C\u002Fcode\u003E时保存。只需将以下内容添加到您的\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E...\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F*\n   ** Build configuration\n  *\u002F\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Ebuild\u003C\u002Fspan\u003E: {\n   \u003Cspan class=\"hljs-comment\"\u003E\u002F*\n    ** 您可以在这里扩展webpack配置\n   *\u002F\u003C\u002Fspan\u003E\n   extend(config, ctx) {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Run ESLint on save\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (ctx.isDev &amp;&amp; ctx.isClient) {\n        config.module.rules.push({\n          \u003Cspan class=\"hljs-attr\"\u003Eenforce\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;pre&quot;\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002F\\.(js|vue)$\u002F\u003C\u002Fspan\u003E,\n          loader: \u003Cspan class=\"hljs-string\"\u003E&quot;eslint-loader&quot;\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"hljs-attr\"\u003Eexclude\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002F(node_modules)\u002F\u003C\u002Fspan\u003E\n        })\n      }\n    }\n  }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdiv class=\"Alert Alert--orange\"\u003E\n\n\u003Cp\u003E有个最佳实践是在 \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E 中增加 \u003Ccode\u003E&quot;precommit&quot;: &quot;npm run lint&quot;\u003C\u002Fcode\u003E ，这样可以实现每次提交代码之前自动进行代码检测校验。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n"},contributors:[{author:"warriorBrian"},{author:"Atinux"},{author:"haffla"},{author:"manniL"},{author:"blesstosam"},{author:"clarkdo"},{author:"tianfanfan"},{author:"oooooo"},{author:"ptibbetts"}]}],fetch:[],mutations:[]});