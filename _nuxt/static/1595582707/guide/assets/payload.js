__NUXT_JSONP__("/guide/assets", {data:[{},{path:"\u002Fzh\u002Fguide\u002Fassets",section:"guide",page:{attrs:{title:"资源文件",description:"默认情况下 Nuxt 使用 vue-loader、file-loader 以及 url-loader 这几个 Webpack 加载器来处理文件的加载和引用。"},body:"\u003Cblockquote\u003E\n\u003Cp\u003E默认情况下 Nuxt 使用 vue-loader、file-loader 以及 url-loader 这几个 Webpack 加载器来处理文件的加载和引用。对于不需要通过 Webpack 处理的静态资源文件，可以放置在 \u003Ccode\u003Estatic\u003C\u002Fcode\u003E 目录中。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"webpack-构建\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#webpack-构建\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EWebpack 构建\u003C\u002Fh2\u003E\u003Cp\u003E默认情况下, \u003Ca href=\"http:\u002F\u002Fvue-loader.vuejs.org\u002Fen\u002F\"\u003Evue-loader\u003C\u002Fa\u003E自动使用 \u003Ccode\u003Ecss-loader\u003C\u002Fcode\u003E 和Vue模板编译器来编译处理vue文件中的样式和模板。在此编译过程中，所有的资源URL例如 \u003Ccode\u003E&lt;img src=&quot;...&quot;&gt;\u003C\u002Fcode\u003E、 \u003Ccode\u003Ebackground: url(...)\u003C\u002Fcode\u003E 和 CSS中的 \u003Ccode\u003E@import\u003C\u002Fcode\u003E 均会被解析成模块通过 \u003Ccode\u003Erequire\u003C\u002Fcode\u003E 引用。\u003C\u002Fp\u003E\n\u003Cp\u003E举个例子, 假设我们有以下文件目录结构：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003E-| assets\u002F\n----| image.png\n-| pages\u002F\n----| index.vue\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E如果我们在CSS代码中使用 \u003Ccode\u003Eurl(&#39;~assets\u002Fimage.png&#39;)\u003C\u002Fcode\u003E, 那么编译后它将被转换成 \u003Ccode\u003Erequire(&#39;~\u002Fassets\u002Fimage.png&#39;)\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cdiv class=\"Alert Alert--orange\"\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E请注意:\u003C\u002Fstrong\u003E 从Nuxt 2.0开始，\u003Ccode\u003E~\u002Falias\u003C\u002Fcode\u003E将无法在\u003Cstrong\u003ECSS文件\u003C\u002Fstrong\u003E中正确解析。你必须在url CSS引用中使用\u003Ccode\u003E~assets\u003C\u002Fcode\u003E（没有斜杠）或\u003Ccode\u003E@\u003C\u002Fcode\u003E别名，即\u003Ccode\u003Ebackground:url(&quot;~assets\u002Fbanner.svg&quot;)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003E又或者如果我们在 \u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E 中使用以下代码引用图片资源：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;~\u002Fassets\u002Fimage.png&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E那么编译后会被转换成：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003EcreateElement(\u003Cspan class=\"hljs-string\"\u003E&#x27;img&#x27;\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-attr\"\u003Eattrs\u003C\u002Fspan\u003E: { \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;~\u002Fassets\u002Fimage.png&#x27;\u003C\u002Fspan\u003E) } })\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003E.png\u003C\u002Fcode\u003E 并非 JavaScript 文件, 因此 Nuxt.js 通过配置Webpack使用\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fwebpack\u002Ffile-loader\"\u003Efile-loader\u003C\u002Fa\u003E 和 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fwebpack\u002Furl-loader\"\u003Eurl-loader\u003C\u002Fa\u003E 这两个加载器来处理此类引用。\u003C\u002Fp\u003E\n\u003Cp\u003E这样做的好处有：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Efile-loader\u003C\u002Fcode\u003E 能让你指定从什么地方拷贝资源文件以及发布后放到哪个目录去，并能让你使用版本哈希码来重命名发布后的文件来实现增量更新和更好的缓存策略。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eurl-loader\u003C\u002Fcode\u003E 能根据你指定的文件大小阈值，来判断一个文件是转换成内联的base-64码（如果该文件尺寸小于该阈值）还是使用\u003Ccode\u003Efile-loader\u003C\u002Fcode\u003E来降级处理。小文件base-64化能有效减少HTTP请求数。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E实际上, Nuxt.js 默认的加载器配置如下：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E[\n  {\n    \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002F\\.(png|jpe?g|gif|svg)$\u002F\u003C\u002Fspan\u003E,\n    loader: \u003Cspan class=\"hljs-string\"\u003E&#x27;url-loader&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Equery\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Elimit\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1000\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 1KB\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;img\u002F[name].[hash:7].[ext]&#x27;\u003C\u002Fspan\u003E\n    }\n  },\n  {\n    \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002F\\.(woff2?|eot|ttf|otf)(\\?.*)?$\u002F\u003C\u002Fspan\u003E,\n    loader: \u003Cspan class=\"hljs-string\"\u003E&#x27;url-loader&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Equery\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Elimit\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1000\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 1 KB\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;fonts\u002F[name].[hash:7].[ext]&#x27;\u003C\u002Fspan\u003E\n    }\n  }\n]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E也即文件（图片或字体）的尺寸小于1K的时候，它将会被转换成 Base-64 data URL 来内联引用；否则它将被拷贝至指定的子目录（在 \u003Ccode\u003E.nuxt\u003C\u002Fcode\u003E 目录下），并被重命名（加上7位的哈希码作为版本标识）以实现更好的缓存策略。\u003C\u002Fp\u003E\n\u003Cp\u003E当用 \u003Ccode\u003Enuxt\u003C\u002Fcode\u003E 命令运行我们的应用时，\u003Ccode\u003Epages\u002Findex.vue\u003C\u002Fcode\u003E 中的模板代码：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;~\u002Fassets\u002Fimage.png&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Etemplate\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E将被编译生成：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;\u002F_nuxt\u002Fimg\u002Fimage.0c61159.png&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E如果你想更新这些加载器的配置或者禁用他们，请参考\u003Ca href=\"\u002Fapi\u002Fconfiguration-build#extend\"\u003Ebuild.extend\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003Ch2 id=\"静态文件\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#静态文件\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E静态文件\u003C\u002Fh2\u003E\u003Cp\u003E如果你的静态资源文件需要 Webpack 做构建编译处理，可以放到 \u003Ccode\u003Eassets\u003C\u002Fcode\u003E 目录，否则可以放到 \u003Ccode\u003Estatic\u003C\u002Fcode\u003E 目录中去。\u003C\u002Fp\u003E\n\u003Cp\u003ENuxt 服务器启动的时候，该目录下的文件会映射至应用的根路径 \u003Ccode\u003E\u002F\u003C\u002Fcode\u003E 下，像 \u003Ccode\u003Erobots.txt\u003C\u002Fcode\u003E 或 \u003Ccode\u003Esitemap.xml\u003C\u002Fcode\u003E 这种类型的文件就很适合放到 \u003Ccode\u003Estatic\u003C\u002Fcode\u003E 目录中。\u003C\u002Fp\u003E\n\u003Cp\u003E你可以在代码中使用根路径 \u003Ccode\u003E\u002F\u003C\u002Fcode\u003E 结合资源相对路径来引用静态资源：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs html\"\u003E\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- 引用 static 目录下的图片 --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;\u002Fmy-image.png&quot;\u003C\u002Fspan\u003E\u002F&gt;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E&lt;!-- 引用 assets 目录下经过 webpack 构建处理后的图片 --&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eimg\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;~\u002Fassets\u002Fmy-image-2.png&quot;\u003C\u002Fspan\u003E\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E"},contributors:[{author:"warriorBrian"},{author:"Atinux"},{author:"ljwrer"},{author:"iDerekLi"}]}],fetch:[],mutations:[]});