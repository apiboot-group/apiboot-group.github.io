__NUXT_JSONP__("/examples/auth-external-jwt", {data:[{},{path:"\u002Fzh\u002Fexamples\u002Fauth-external-jwt",section:"examples",page:{attrs:{title:"跨域身份验证 (JWT)",description:"使用Nuxt.js通过外部API服务(jsonwebtoken)示例进行身份验证",github:"auth-jwt",code:"https:\u002F\u002Fgithub.com\u002Fahadyekta\u002Fnuxt-auth-external-jwt"},body:"\u003Ch1 id=\"文档\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#文档\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E文档\u003C\u002Fh1\u003E\u003Cp\u003E在auth-routes示例中，api和nuxt一起启动并使用一个Node.js服务器实例。但是，有时我们应该使用\u003Ccode\u003EjsonWebToken\u003C\u002Fcode\u003E处理外部api身份验证问题。在这个例子中，将用最简单的方式解释。\u003C\u002Fp\u003E\n\u003Ch2 id=\"官方-code-auth-module-code-\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#官方-code-auth-module-code-\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E官方 \u003Ccode\u003Eauth-module\u003C\u002Fcode\u003E\u003C\u002Fh2\u003E\u003Cp\u003E如果要实现复杂的身份验证流程，例如OAuth2，我们建议使用官方 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fnuxt-community\u002Fauth-module\"\u003E\u003Ccode\u003Eauth-module\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"结构\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#结构\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E结构\u003C\u002Fh2\u003E\u003Cp\u003E由于Nuxt.js同时提供服务器和客户端呈现，并且浏览器的cookie与Node.js服务器的cookie不同，因此我们应该将令牌(token)数据推送到可以在两端访问的某个存储空间中。\u003C\u002Fp\u003E\n\u003Ch3 id=\"用于服务器端渲染\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#用于服务器端渲染\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E用于服务器端渲染\u003C\u002Fh3\u003E\u003Cp\u003E我们应该在登录后在会话浏览器cookie中保存令牌(token)，然后可以通过中间件文件中的 \u003Ccode\u003Ereq.headers.cookie\u003C\u002Fcode\u003E， \u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003E 函数或者你可以访问 \u003Ccode\u003Ereq\u003C\u002Fcode\u003E 来得到它。\u003C\u002Fp\u003E\n\u003Ch3 id=\"用于客户端渲染\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#用于客户端渲染\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E用于客户端渲染\u003C\u002Fh3\u003E\u003Cp\u003E我们直接在商店中提交令牌(token)，只要页面没有关闭或重新加载，我们就有令牌(token)。\u003C\u002Fp\u003E\n\u003Cp\u003E首先，我们安装依赖项：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install js-cookie --save\nnpm install cookieparser --save\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"登录页面\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#登录页面\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E登录页面\u003C\u002Fh2\u003E\u003Cp\u003E然后在页面目录中创建一个 \u003Ccode\u003Elogin.vue\u003C\u002Fcode\u003E 文件，并在脚本部分中添加：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Cookie = process.client ? \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;js-cookie&#x27;\u003C\u002Fspan\u003E) : \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Emiddleware\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;notAuthenticated&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Emethods\u003C\u002Fspan\u003E: {\n    postLogin () {\n      \u003Cspan class=\"hljs-built_in\"\u003EsetTimeout\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 我们用超时模拟异步请求。\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E auth = {\n          \u003Cspan class=\"hljs-attr\"\u003EaccessToken\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;someStringGotFromApiServiceWithAjax&#x27;\u003C\u002Fspan\u003E\n        }\n        \u003Cspan class=\"hljs-built_in\"\u003Ethis\u003C\u002Fspan\u003E.$store.commit(\u003Cspan class=\"hljs-string\"\u003E&#x27;setAuth&#x27;\u003C\u002Fspan\u003E, auth) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 存储在vuex中用来进行客户端渲染\u003C\u002Fspan\u003E\n        Cookie.set(\u003Cspan class=\"hljs-string\"\u003E&#x27;auth&#x27;\u003C\u002Fspan\u003E, auth) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 在cookie中保存token用来进行服务器端渲染\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-built_in\"\u003Ethis\u003C\u002Fspan\u003E.$router.push(\u003Cspan class=\"hljs-string\"\u003E&#x27;\u002F&#x27;\u003C\u002Fspan\u003E)\n      }, \u003Cspan class=\"hljs-number\"\u003E1000\u003C\u002Fspan\u003E)\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003E注意: 我们用超时模拟异步请求。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"使用-store\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#使用-store\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E使用 store\u003C\u002Fh2\u003E\u003Cp\u003E之后在 \u003Ccode\u003Estore\u003C\u002Fcode\u003E 目录中新建 \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E ，如下所示：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E Vuex \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;vuex&#x27;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E cookieparser = process.server ? \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;cookieparser&#x27;\u003C\u002Fspan\u003E) : \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E createStore = \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Vuex.Store({\n    \u003Cspan class=\"hljs-attr\"\u003Estate\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E ({\n      \u003Cspan class=\"hljs-attr\"\u003Eauth\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n    }),\n    \u003Cspan class=\"hljs-attr\"\u003Emutations\u003C\u002Fspan\u003E: {\n      setAuth (state, auth) {\n        state.auth = auth\n      }\n    },\n    \u003Cspan class=\"hljs-attr\"\u003Eactions\u003C\u002Fspan\u003E: {\n      nuxtServerInit ({ commit }, { req }) {\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E auth = \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (req.headers.cookie) {\n          \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E parsed = cookieparser.parse(req.headers.cookie)\n          \u003Cspan class=\"hljs-keyword\"\u003Etry\u003C\u002Fspan\u003E {\n            auth = \u003Cspan class=\"hljs-built_in\"\u003EJSON\u003C\u002Fspan\u003E.parse(parsed.auth)\n          } \u003Cspan class=\"hljs-keyword\"\u003Ecatch\u003C\u002Fspan\u003E (err) {\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 找不到有效的Cookie\u003C\u002Fspan\u003E\n          }\n        }\n        commit(\u003Cspan class=\"hljs-string\"\u003E&#x27;setAuth&#x27;\u003C\u002Fspan\u003E, auth)\n      }\n    }\n  })\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E createStore\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003E注意：\u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003E 函数仅在每个服务器端渲染中运行。因此我们使用store来改变中浏览器cookie。我们可以使用\u003Ccode\u003Ereq.headers.cookie\u003C\u002Fcode\u003E获取浏览器cookie，并使用\u003Ccode\u003Ecookie-parser\u003C\u002Fcode\u003E解析它。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"检查auth中间件\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#检查auth中间件\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E检查auth中间件\u003C\u002Fh2\u003E\u003Cp\u003E我们可以检查商店是否在我们需要限制访问的每个页面中都有访问令牌(token)。在中间件(middleware)目录中，我们新建 \u003Ccode\u003Eauthenticated.js\u003C\u002Fcode\u003E 文件：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E{ store, redirect }\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 如果用户未经过身份验证\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!store.state.auth) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E redirect(\u003Cspan class=\"hljs-string\"\u003E&#x27;\u002Flogin&#x27;\u003C\u002Fspan\u003E)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E在中间件(middleware)目录中为登录页面新建 \u003Ccode\u003EnotAuthenticated.js\u003C\u002Fcode\u003E 文件：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E{ store, redirect }\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 如果用户通过身份验证，则重定向到主页\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (store.state.auth) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E redirect(\u003Cspan class=\"hljs-string\"\u003E&#x27;\u002F&#x27;\u003C\u002Fspan\u003E)\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003E注意：对于需要身份验证的页面使用 \u003Ccode\u003Eauthenticated\u003C\u002Fcode\u003E 中间件，并在 登录\u002F注册 和类似页面中使用 \u003Ccode\u003EnotAuthenticated\u003C\u002Fcode\u003E 中间件。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"注销用户\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#注销用户\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E注销用户\u003C\u002Fh2\u003E\u003Cp\u003E最后为了允许用户退出登录，我们可以删除cookie：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs javascript\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Cookie = process.client ? \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;js-cookie&#x27;\u003C\u002Fspan\u003E) : \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Emethods\u003C\u002Fspan\u003E: {\n    logout () {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 使外部API上的JWT Cookie无效\u003C\u002Fspan\u003E\n      Cookie.remove(\u003Cspan class=\"hljs-string\"\u003E&#x27;auth&#x27;\u003C\u002Fspan\u003E)\n      \u003Cspan class=\"hljs-built_in\"\u003Ethis\u003C\u002Fspan\u003E.$store.commit(\u003Cspan class=\"hljs-string\"\u003E&#x27;setAuth&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E)\n    }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003ENote: refer to the method using @click=&quot;logout&quot;\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n"},contributors:[{author:"warriorBrian"}]}],fetch:[],mutations:[]});