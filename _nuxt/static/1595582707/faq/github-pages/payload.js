__NUXT_JSONP__("/faq/github-pages", {data:[{},{path:"\u002Fzh\u002Ffaq\u002Fgithub-pages",section:"faq",page:{attrs:{title:"如何部署至GitHub Pages？",description:"如何将 Nuxt.js 应用部署至GitHub Pages？"},body:"\u003Ch1 id=\"如何部署至github-pages-\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#如何部署至github-pages-\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E如何部署至GitHub Pages？\u003C\u002Fh1\u003E\u003Cp\u003ENuxt.js 允许你将静态化后的站点部署至任何静态站点托管服务中，例如 \u003Ca href=\"https:\u002F\u002Fpages.github.com\u002F\"\u003EGitHub Pages\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E部署至 GitHub Pages，首先需要将应用静态化：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm run generate\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E上述的命令会生成一个 \u003Ccode\u003Edist\u003C\u002Fcode\u003E 目录，该目录包含了待部署的所有资源文件。\n如果是项目站点，可以将 \u003Ccode\u003Edist\u003C\u002Fcode\u003E 的内容提交至项目的 \u003Ccode\u003Egh-pages\u003C\u002Fcode\u003E 分支；如果是用户（github.com\u002Fuser\u002Fuser.github.io）或组织（github.com\u002Forg\u002Forg.github.io）站点，需提交至对应 GitHub 项目的 \u003Ccode\u003Emaster\u003C\u002Fcode\u003E 分支。\u003C\u002Fp\u003E\n\u003Cdiv class=\"Alert Alert--nuxt-green\"\u003E\n\n\u003Cp\u003E\u003Cb\u003E提示：\u003C\u002Fb\u003E 如果你的 GitHub Pages 使用了自定义域名，建议将 \u003Ccode\u003ECNAME\u003C\u002Fcode\u003E 放在 Nuxt.js 应用的 \u003Ccode\u003Estatic\u003C\u002Fcode\u003E 目录。 可以移步 \u003Ca href=\"\u002Fguide\u002Fassets#%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6\"\u003E\u003Ccode\u003Estatic\u003C\u002Fcode\u003E\u003C\u002Fa\u003E 了解更多信息。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch2 id=\"部署到-github-页面并获取仓库\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#部署到-github-页面并获取仓库\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E部署到 GitHub 页面并获取仓库\u003C\u002Fh2\u003E\u003Cp\u003E如果您要为一个特定的存储库创建GitHub页面，并且您没有任何自定义域，则该页面的URL将采用以下格式：\u003Ccode\u003Ehttp:\u002F\u002F&lt;username&gt;.github.io\u002F&lt;repository-name&gt;\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E如果您在没有添加 \u003Ca href=\"https:\u002F\u002Fnuxtjs.org\u002Fapi\u002Fconfiguration-router\u002F#base\"\u003Erouter base\u003C\u002Fa\u003E 的情况下部署了\u003Ccode\u003Edist\u003C\u002Fcode\u003E文件夹，那么当您访问已部署的站点时，您会发现该站点因缺失\u003Ccode\u003Eassets\u003C\u002Fcode\u003E而无法正常工作。这是因为我们假设网站根目录是\u003Ccode\u003E\u002F\u003C\u002Fcode\u003E，但在这种情况下它是\u003Ccode\u003E\u002F&lt;repository-name&gt;\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E要解决此问题，我们需要在 \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E 中添加 \u003Ca href=\"https:\u002F\u002Fnuxtjs.org\u002Fapi\u002Fconfiguration-router\u002F#base\"\u003Erouter base\u003C\u002Fa\u003E 配置：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Erouter\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Ebase\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;\u002F&lt;repository-name&gt;\u002F&#x27;\u003C\u002Fspan\u003E\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E这样，所有生成的路径 assets 都将以\u003Ccode\u003E\u002F&lt;repository-name&gt;\u002F\u003C\u002Fcode\u003E为前缀，下次将代码部署到存储库GitHub Pages时，该站点会正常工作。\u003C\u002Fp\u003E\n\u003Cp\u003E将 \u003Ccode\u003Erouter.base\u003C\u002Fcode\u003E 添加为 \u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E 中的默认设置有一个缺点，但是当你运行 \u003Ccode\u003Enpm run dev\u003C\u002Fcode\u003E 时，由于基本路径改变，它将无法正常工作。要解决这个问题，我们为 \u003Ccode\u003Erouter.base\u003C\u002Fcode\u003E 创建一个条件是否包含 \u003Ccode\u003E&lt;repository-name&gt;\u003C\u002Fcode\u003E ：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F* nuxt.config.js *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F only add `router.base = &#x27;\u002F&lt;repository-name&gt;\u002F&#x27;` if `DEPLOY_ENV` is `GH_PAGES`\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E routerBase = process.env.DEPLOY_ENV === \u003Cspan class=\"hljs-string\"\u003E&#x27;GH_PAGES&#x27;\u003C\u002Fspan\u003E ? {\n  \u003Cspan class=\"hljs-attr\"\u003Erouter\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Ebase\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;\u002F&lt;repository-name&gt;\u002F&#x27;\u003C\u002Fspan\u003E\n  }\n} : {}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E {\n  ...routerBase\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E现在我们只需要设置 \u003Ccode\u003EDEPLOY_ENV=&#39;GH_PAGES&#39;\u003C\u002Fcode\u003E ：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F* package.json *\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-string\"\u003E&quot;scripts&quot;\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E&quot;build:gh-pages&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;DEPLOY_ENV=GH_PAGES nuxt build&quot;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-string\"\u003E&quot;generate:gh-pages&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;DEPLOY_ENV=GH_PAGES nuxt generate&quot;\u003C\u002Fspan\u003E\n},\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E对于Windows用户，如果您不使用 \u003Ccode\u003Ebash\u003C\u002Fcode\u003E ，则可能需要安装\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fkentcdodds\u002Fcross-env\"\u003Ecross-env\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs sh\"\u003Enpm install cross-env --save-dev\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E然后以这种方式使用它：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E  \u003Cspan class=\"hljs-string\"\u003E&quot;build:gh-pages&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;cross-env DEPLOY_ENV=GH_PAGES nuxt build&quot;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-string\"\u003E&quot;generate:gh-pages&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;cross-env DEPLOY_ENV=GH_PAGES nuxt generate&quot;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"使用命令行进行部署\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#使用命令行进行部署\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E使用命令行进行部署\u003C\u002Fh2\u003E\u003Cp\u003E你也可以利用 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FL33T-KR3W\u002Fpush-dir\"\u003Epush-dir\u003C\u002Fa\u003E npm 包来部署：\u003C\u002Fp\u003E\n\u003Cp\u003E首先安装 \u003Ccode\u003Epush-dir\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm install push-dir --save-dev\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E然后在 \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E 中添加一个 \u003Ccode\u003Edeploy\u003C\u002Fcode\u003E 的命令如下：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-string\"\u003E&quot;scripts&quot;\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-string\"\u003E&quot;dev&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;nuxt&quot;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-string\"\u003E&quot;build&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;nuxt build&quot;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-string\"\u003E&quot;start&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;nuxt start&quot;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-string\"\u003E&quot;generate&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;nuxt generate&quot;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-string\"\u003E&quot;deploy&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;push-dir --dir=dist --branch=gh-pages --cleanup&quot;\u003C\u002Fspan\u003E\n},\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\n\u003Cp\u003E注：如果是个人或组织站点，需将上面 \u003Ccode\u003Edeploy\u003C\u002Fcode\u003E 命令中的 \u003Ccode\u003E--branch\u003C\u002Fcode\u003E 设置成 \u003Ccode\u003Emaster\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E最后，我们可以通过以下命令来部署应用：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Enpm run generate\nnpm run deploy\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2 id=\"构建服务器部署\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#构建服务器部署\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003E构建服务器部署\u003C\u002Fh2\u003E\u003Cp\u003E您可以进一步部署，而不必手动编译和部署本地安装中的文件，您可以使用构建服务器来监视 GitHub 仓库以进行新提交，然后自动检出仓库，编译和部署所有内容。\u003C\u002Fp\u003E\n\u003Cp\u003E在配置构建服务器之前，首先需要 \u003Ca href=\"https:\u002F\u002Fhelp.github.com\u002Farticles\u002Fcreating-a-personal-access-token-for-the-command-line\u002F#creating-a-token\"\u003E生成GitHub个人访问令牌\u003C\u002Fa\u003E 以授予构建服务器代表您执行任务的权限。 一旦您创建了令牌，请保留其安全副本，以便稍后使用。\u003C\u002Fp\u003E\n\u003Ch3 id=\"travis-ci\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#travis-ci\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003ETravis CI\u003C\u002Fh3\u003E\u003Cp\u003E使用\u003Ca href=\"https:\u002F\u002Ftravis-ci.org\u002F\"\u003ETravis CI\u003C\u002Fa\u003E进行部署，免费开源项目构建服务器，通过您的GitHub帐户登录，授予Travis访问权限以查看您的存储库，然后启用构建服务器 通过在显示的列表中切换存储库名称旁边的开关来为您的存储库。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fgithub_pages_travis_01.png\" alt=\"Travis Builder Server Enable\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E接下来，单击存储库名称旁边的 cog 图标以配置构建服务器的常规设置，并通过切换开关启用 &#39;Build only if .travis.yml is present&#39; 功能。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fgithub_pages_travis_02.png\" alt=\"Travis Builder Server Settings\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E在同一屏幕上，向下滚动到 Environment Variables 部分并创建一个名为 \u003Ccode\u003EGITHUB_ACCESS_TOKEN\u003C\u002Fcode\u003E 的新变量，并在值字段中粘贴您之前创建的GitHub个人访问令牌的副本，然后单击 &#39;Add&#39; 按钮。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fgithub_pages_travis_03.png\" alt=\"Travis Builder Server Environment Variables\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E最后，使用以下内容在存储库的根目录中创建 \u003Ccode\u003E.travis.yml\u003C\u002Fcode\u003E 配置文件\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs yaml\"\u003E\u003Cspan class=\"hljs-attr\"\u003Elanguage:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Enode_js\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Enode_js:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;8&quot;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-attr\"\u003Ecache:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Edirectories:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;node_modules&quot;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-attr\"\u003Ebranches:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eonly:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Emaster\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-attr\"\u003Einstall:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Enpm\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Einstall\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Enpm\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Erun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Egenerate\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-attr\"\u003Escript:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Eecho\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;Skipping tests&quot;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-attr\"\u003Edeploy:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eprovider:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Epages\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eskip-cleanup:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Egithub-token:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E$GITHUB_ACCESS_TOKEN\u003C\u002Fspan\u003E  \u003Cspan class=\"hljs-comment\"\u003E# Set in travis-ci.org dashboard, marked secure https:\u002F\u002Fdocs.travis-ci.com\u002Fuser\u002Fdeployment\u002Fpages\u002F#Setting-the-GitHub-token\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Etarget-branch:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Egh-pages\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Elocal-dir:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Edist\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eon:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Ebranch:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Emaster\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E然后将其提交到您的存储库\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Egit add .travis.yml\ngit commit -m \u003Cspan class=\"hljs-string\"\u003E&quot;Adding travis deploy configuration&quot;\u003C\u002Fspan\u003E\ngit push origin\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E现在，无论何时从 Travis 中提交对存储库的任何更改，您都会看到新的构建打包并重新启动\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fgithub_pages_travis_04.png\" alt=\"Travis Builder Server Output\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E完成后，您将看到您的GitHub页面站点自动更新。\u003C\u002Fp\u003E\n\u003Ch3 id=\"appveyor\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#appveyor\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003EAppveyor\u003C\u002Fh3\u003E\u003Cp\u003E要通过 \u003Ca href=\"https:\u002F\u002Fwww.appveyor.com\"\u003EAppveyor\u003C\u002Fa\u003E 进行部署，另一个免费的开源项目构建服务器，注册一个新帐户，选择 GitHub 身份验证选项来使用您的 GitHub 帐户登录。\u003C\u002Fp\u003E\n\u003Cp\u003E登录后，单击 &#39;New project&#39; 链接，然后单击显示的列表中存储库名称旁边的 &#39;Add&#39; 按钮，以在存储库中启用构建服务器。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fgithub_pages_appveyor_01.png\" alt=\"Appveyor Builder Server Enable\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E接下来，在存储库的\u003Cstrong\u003E根目录\u003C\u002Fstrong\u003E中，创建一个包含以下内容的 \u003Ccode\u003Eappveyor.yml\u003C\u002Fcode\u003E 配置文件\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs yaml\"\u003E\u003Cspan class=\"hljs-attr\"\u003Eenvironment:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# Nuxt requires node v8 minimum\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Enodejs_version:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;8&quot;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# Encrypt sensitive data (https:\u002F\u002Fci.appveyor.com\u002Ftools\u002Fencrypt)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Egithub_access_token:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Esecure:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EENCRYPTED_GITHUB_ACCESS_TOKEN\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Egithub_email:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Esecure:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EENCRYPTED_GITHUB_EMAIL\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E# Only run on master branch\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Ebranches:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eonly:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Emaster\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E# Install scripts. (runs after repo cloning)\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Einstall:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# switch nodejs version\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eps:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EInstall-Product\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Enode\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E$env:nodejs_version\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# install modules\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Enpm\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Einstall\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# generate static files\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Enpm\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Erun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Egenerate\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# configure global git credentials store (https:\u002F\u002Fwww.appveyor.com\u002Fdocs\u002Fhow-to\u002Fgit-push\u002F)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Egit\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Econfig\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E--global\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Ecredential.helper\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Estore\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eps:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EAdd-Content\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;$env:USERPROFILE\\.git-credentials&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;https:\u002F\u002F$($env:github_access_token):x-oauth-basic@github.com`n&quot;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Egit\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Econfig\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E--global\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Euser.email\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E$env:github_email\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# deploy to GitHub pages\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-bullet\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Enpm\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Erun\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Edeploy\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E# No tests to run\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Etest:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Eoff\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E# Don&#x27;t actually build.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Ebuild:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003Eoff\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003E注意\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E此配置假设您已根据 \u003Ca href=\"#command-line-deployment\"\u003E命令行部署\u003C\u002Fa\u003E 说明配置了 \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E 文件\u003C\u002Fp\u003E\n\u003Cp\u003E但是，在提交此文件之前，您需要使用之前的 GitHub 个人访问令牌和使用 \u003Ca href=\"https:\u002F\u002Fci.appveyor.com\u002Ftools\u002Fencrypt\"\u003EAppveyor加密工具\u003C\u002Fa\u003E 加密的 GitHub 电子邮件地址更改 \u003Ccode\u003EENCRYPTED_GITHUB_ACCESS_TOKEN\u003C\u002Fcode\u003E 和 \u003Ccode\u003EENCRYPTED_GITHUB_EMAIL\u003C\u002Fcode\u003E 变量\u003C\u002Fp\u003E\n\u003Cp\u003E更新后，将文件提交到您的存储库\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs bash\"\u003Egit add appveyor.yml\ngit commit -m \u003Cspan class=\"hljs-string\"\u003E&quot;Adding appveyor deploy configuration&quot;\u003C\u002Fspan\u003E\ngit push origin\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E现在，每当您从Appveyor中提交对存储库的任何更改时，您都会看到新的构建打包并重新启动\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fgithub_pages_appveyor_02.png\" alt=\"Appveyor Builder Server Output\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E完成后，您将看到您的GitHub页面站点自动更新。\u003C\u002Fp\u003E\n"},contributors:[{author:"Atinux"},{author:"warriorBrian"},{author:"manniL"}]}],fetch:[],mutations:[]});