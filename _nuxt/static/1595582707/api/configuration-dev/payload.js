__NUXT_JSONP__("/api/configuration-dev", {data:[{},{path:"\u002Fzh\u002Fapi\u002Fconfiguration-dev",section:"api",page:{attrs:{title:"API: dev 属性配置",description:"配置应用是开发模式还是生产模式。"},body:"\u003Ch1 id=\"dev-属性配置\"\u003E\u003Ca class=\"anchor\" aria-hidden=\"true\" href=\"#dev-属性配置\"\u003E\u003Csvg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"\u003E\u003Cpath fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\u002F\u003E\u003C\u002Fsvg\u003E\u003C\u002Fa\u003Edev 属性配置\u003C\u002Fh1\u003E\u003Cul\u003E\n\u003Cli\u003E类型： \u003Ccode\u003EBoolean\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E默认值： \u003Ccode\u003Etrue\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E配置 Nuxt.js 应用是开发模式还是生产模式。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003Edev 属性的值会被 \u003Ca href=\"\u002Fguide\u002Fcommands\"\u003Enuxt 命令\u003C\u002Fa\u003E 覆盖：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E当使用 \u003Ccode\u003Enuxt\u003C\u002Fcode\u003E 命令时，\u003Ccode\u003Edev\u003C\u002Fcode\u003E 会被强制设置成 \u003Ccode\u003Etrue\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E当使用 \u003Ccode\u003Enuxt build\u003C\u002Fcode\u003E， \u003Ccode\u003Enuxt start\u003C\u002Fcode\u003E 或 \u003Ccode\u003Enuxt generate\u003C\u002Fcode\u003E 命令时，\u003Ccode\u003Edev\u003C\u002Fcode\u003E 会被强制设置成 \u003Ccode\u003Efalse\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E所以，在 \u003Ca href=\"\u002Fapi\u002Fnuxt\"\u003E编码中使用 nuxt.js\u003C\u002Fa\u003E 时才会用到该配置。\u003C\u002Fp\u003E\n\u003Cp\u003E例如 （\u003Ccode\u003Enuxt.config.js\u003C\u002Fcode\u003E)：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-built_in\"\u003Emodule\u003C\u002Fspan\u003E.exports = {\n  \u003Cspan class=\"hljs-attr\"\u003Edev\u003C\u002Fspan\u003E: (process.env.NODE_ENV !== \u003Cspan class=\"hljs-string\"\u003E&#x27;production&#x27;\u003C\u002Fspan\u003E)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E在 \u003Ccode\u003Eserver.js\u003C\u002Fcode\u003E 中：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs js\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { Nuxt, Builder } = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;nuxt&#x27;\u003C\u002Fspan\u003E)\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E app = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;express&#x27;\u003C\u002Fspan\u003E)()\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E port = process.env.PORT || \u003Cspan class=\"hljs-number\"\u003E3000\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 传入配置初始化 Nuxt.js 实例\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E config = \u003Cspan class=\"hljs-built_in\"\u003Erequire\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;.\u002Fnuxt.config.js&#x27;\u003C\u002Fspan\u003E)\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E nuxt = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Nuxt(config)\napp.use(nuxt.render)\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 在开发模式下进行编译\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (config.dev) {\n  \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E Builder(nuxt).build()\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 监听指定端口\u003C\u002Fspan\u003E\napp.listen(port, \u003Cspan class=\"hljs-string\"\u003E&#x27;0.0.0.0&#x27;\u003C\u002Fspan\u003E)\n\u003Cspan class=\"hljs-built_in\"\u003Econsole\u003C\u002Fspan\u003E.log(\u003Cspan class=\"hljs-string\"\u003E&#x27;服务器运行于 localhost:&#x27;\u003C\u002Fspan\u003E + port)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E然后可在 \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E 中添加脚本配置如下：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs json\"\u003E{\n  \u003Cspan class=\"hljs-attr\"\u003E&quot;scripts&quot;\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;dev&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;node server.js&quot;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;build&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;nuxt build&quot;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;start&quot;\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;NODE_ENV=production node server.js&quot;\u003C\u002Fspan\u003E\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E注意: 要运行上面的示例，你需要运行 \u003Ccode\u003Enpm install --save-dev cross-env\u003C\u002Fcode\u003E 安装 \u003Ccode\u003Ecross-env\u003C\u002Fcode\u003E。 如果你在\u003Cem\u003E非\u003C\u002Fem\u003E Windows 环境下开发，你可以不用安装 cross-env，这时需要把 \u003Ccode\u003Estart\u003C\u002Fcode\u003E 脚本中的 cross-env 去掉并直接设置\u003Ccode\u003ENODE_ENV\u003C\u002Fcode\u003E即可。\u003C\u002Fp\u003E\n"},contributors:[{author:"luckyG0429"},{author:"mubaidr"},{author:"warriorBrian"},{author:"Atinux"}]}],fetch:[],mutations:[]});